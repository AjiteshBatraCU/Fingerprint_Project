
prj_code.elf:     file format elf32-littlenios2
prj_code.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000031a8 memsz 0x000031a8 flags r-x
    LOAD off    0x000041c8 vaddr 0x000231c8 paddr 0x000249a8 align 2**12
         filesz 0x000017e0 memsz 0x000017e0 flags rw-
    LOAD off    0x00006188 vaddr 0x00026188 paddr 0x00026188 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002f2c  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000058  00023170  00023170  00004170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000017e0  000231c8  000249a8  000041c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00026188  00026188  00006188  2**2
                  ALLOC, SMALL_DATA
  6 .prog_mem     00000000  000262a8  000262a8  000059a8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000059a8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000678  00000000  00000000  000059d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000891f  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003179  00000000  00000000  0000e967  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000031a7  00000000  00000000  00011ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d64  00000000  00000000  00014c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e26  00000000  00000000  000159ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000c3e  00000000  00000000  00017812  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00018450  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d8  00000000  00000000  00018480  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001a46e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001a471  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001a474  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001a475  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001a476  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001a47a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001a47e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001a482  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001a48b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001a494  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0001a49d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000019  00000000  00000000  0001a4aa  2**0
                  CONTENTS, READONLY
 29 .jdi          000042b2  00000000  00000000  0001a4c3  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007f201  00000000  00000000  0001e775  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
00023170 l    d  .rodata	00000000 .rodata
000231c8 l    d  .rwdata	00000000 .rwdata
00026188 l    d  .bss	00000000 .bss
000262a8 l    d  .prog_mem	00000000 .prog_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../prj_code_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00020508 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00020814 l     F .text	00000034 alt_dev_reg
000231c8 l     O .rwdata	00001060 jtag_uart
00024228 l     O .rwdata	000000c4 fp1_control
000242ec l     O .rwdata	000000c4 fp2_control
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00020b48 l     F .text	0000020c altera_avalon_jtag_uart_irq
00020d54 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002138c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0002163c l     F .text	0000009c altera_avalon_uart_irq
000216d8 l     F .text	000000e4 altera_avalon_uart_rxirq
000217bc l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00021958 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00021b70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00021e84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00021fd8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00022004 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00022478 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000225b8 l     F .text	0000003c alt_get_errno
000225f4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00024558 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000261a0 g     O .bss	00000004 alt_instruction_exception_handler
000205f4 g     F .text	0000007c alt_main
000261a8 g     O .bss	00000100 alt_irq
000249a8 g       *ABS*	00000000 __flash_rwdata_start
00022870 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
000261a4 g     O .bss	00000004 errno
0002618c g     O .bss	00000004 alt_argv
0002c97c g       *ABS*	00000000 _gp
000243d8 g     O .rwdata	00000180 alt_fd_list
00022894 g     F .text	00000090 alt_find_dev
00022cc4 g     F .text	00000148 memcpy
0002253c g     F .text	0000007c alt_io_redirect
00023170 g       *ABS*	00000000 __DTOR_END__
00022b60 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00020f4c g     F .text	0000021c altera_avalon_jtag_uart_read
0002044c g     F .text	00000064 .hidden __udivsi3
00022ad0 g     F .text	00000090 alt_icache_flush
00024994 g     O .rwdata	00000004 alt_max_fd
000249a0 g     O .rwdata	00000004 _global_impure_ptr
000262a8 g       *ABS*	00000000 __bss_end
00022388 g     F .text	000000f0 alt_iic_isr_register
0002070c g     F .text	00000108 alt_tick
00021590 g     F .text	000000ac altera_avalon_uart_init
0002233c g     F .text	0000004c alt_ic_irq_enabled
00020670 g     F .text	0000009c alt_alarm_stop
0002619c g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
000243b0 g     O .rwdata	00000028 alt_dev_null
00021f90 g     F .text	00000048 alt_dcache_flush_all
000249a8 g       *ABS*	00000000 __ram_rwdata_end
0002498c g     O .rwdata	00000008 alt_dev_list
000231c8 g       *ABS*	00000000 __ram_rodata_end
000204b0 g     F .text	00000058 .hidden __umodsi3
000262a8 g       *ABS*	00000000 end
00021bac g     F .text	000001ac altera_avalon_uart_write
00020a88 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00023170 g       *ABS*	00000000 __CTOR_LIST__
00033880 g       *ABS*	00000000 __alt_stack_pointer
00021404 g     F .text	0000007c alt_avalon_timer_sc_init
000214e0 g     F .text	00000060 altera_avalon_uart_write_fd
00021540 g     F .text	00000050 altera_avalon_uart_close_fd
00021168 g     F .text	00000224 altera_avalon_jtag_uart_write
00022fbc g     F .text	00000180 __call_exitprocs
00020244 g     F .text	0000004c _start
00026194 g     O .bss	00000004 _alt_tick_rate
00026198 g     O .bss	00000004 _alt_nticks
00020880 g     F .text	000000a4 alt_sys_init
00022ea4 g     F .text	00000118 __register_exitproc
00020df4 g     F .text	00000068 altera_avalon_jtag_uart_close
000231c8 g       *ABS*	00000000 __ram_rwdata_start
00023170 g       *ABS*	00000000 __ram_rodata_start
00020924 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00022a2c g     F .text	000000a4 alt_get_fd
00022c48 g     F .text	0000007c memcmp
000209e4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000262a8 g       *ABS*	00000000 __alt_stack_base
00020a34 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022924 g     F .text	00000108 alt_find_file
00022040 g     F .text	000000a4 alt_dev_llist_insert
00020000 g       *ABS*	00000000 __alt_mem_prog_mem
00026188 g       *ABS*	00000000 __bss_start
00020290 g     F .text	000000c4 main
00026190 g     O .bss	00000004 alt_envp
00020984 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00024998 g     O .rwdata	00000004 alt_errno
00020354 g     F .text	00000084 .hidden __divsi3
00023170 g       *ABS*	00000000 __CTOR_END__
00023170 g       *ABS*	00000000 __flash_rodata_start
00023170 g       *ABS*	00000000 __DTOR_LIST__
00020848 g     F .text	00000038 alt_irq_init
0002280c g     F .text	00000064 alt_release_fd
00022bfc g     F .text	00000014 atexit
000249a4 g     O .rwdata	00000004 _impure_ptr
00026188 g     O .bss	00000004 alt_argc
00022144 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00024984 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
000221d8 g     F .text	00000050 alt_ic_isr_register
000249a8 g       *ABS*	00000000 _edata
00021480 g     F .text	00000060 altera_avalon_uart_read_fd
000262a8 g       *ABS*	00000000 _end
00020244 g       *ABS*	00000000 __ram_exceptions_end
00020e5c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000222b0 g     F .text	0000008c alt_ic_irq_disable
00022c10 g     F .text	00000038 exit
000203d8 g     F .text	00000074 .hidden __modsi3
00033880 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00021904 g     F .text	00000054 altera_avalon_uart_close
0002313c g     F .text	00000034 _exit
00021d58 g     F .text	0000012c alt_alarm_start
00022e0c g     F .text	00000098 strlen
000226b8 g     F .text	00000154 open
000221a4 g     F .text	00000034 alt_icache_flush_all
0002499c g     O .rwdata	00000004 alt_priority_mask
00022228 g     F .text	00000088 alt_ic_irq_enable
00021994 g     F .text	000001dc altera_avalon_uart_read
0002497c g     O .rwdata	00000008 alt_alarm_list
000220e4 g     F .text	00000060 _do_ctors
00021ec0 g     F .text	000000d0 close
00020570 g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00808014 	movui	r2,512
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xfffec784>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_prog_mem-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000b4 	movhi	r2,2
   20140:	10986a04 	addi	r2,r2,25000
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000b4 	movhi	r2,2
   20158:	10986a04 	addi	r2,r2,25000
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffec8ac>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffec8a0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a60917 	ldw	r2,-26588(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a60917 	ldw	r2,-26588(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <__alt_data_end+0xfffec9c8>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	dece2014 	ori	sp,sp,14464
    movhi gp, %hi(_gp)
   2025c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20260:	d6b25f14 	ori	gp,gp,51580
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20268:	10986214 	ori	r2,r2,24968

    movhi r3, %hi(__bss_end)
   2026c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20270:	18d8aa14 	ori	r3,r3,25256

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <__alt_data_end+0xfffec9f8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	00205700 	call	20570 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	00205f40 	call	205f4 <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <__alt_data_end+0xfffeca0c>

00020290 <main>:
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_alarm.h"
#include <io.h>

void main() {
   20290:	defffc04 	addi	sp,sp,-16
   20294:	dfc00315 	stw	ra,12(sp)
   20298:	df000215 	stw	fp,8(sp)
   2029c:	df000204 	addi	fp,sp,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   202a0:	d0a60617 	ldw	r2,-26600(gp)
	int count;
	int speed = alt_ticks_per_second();
   202a4:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   202a8:	d0a60717 	ldw	r2,-26596(gp)
	while(1) {
		count = alt_nticks();
   202ac:	e0bfff15 	stw	r2,-4(fp)
		if(count%1000 == 0 && (count/1000)%2 == 0)
   202b0:	e0bfff17 	ldw	r2,-4(fp)
   202b4:	0140fa04 	movi	r5,1000
   202b8:	1009883a 	mov	r4,r2
   202bc:	00203d80 	call	203d8 <__modsi3>
   202c0:	10000b1e 	bne	r2,zero,202f0 <main+0x60>
   202c4:	e0bfff17 	ldw	r2,-4(fp)
   202c8:	0140fa04 	movi	r5,1000
   202cc:	1009883a 	mov	r4,r2
   202d0:	00203540 	call	20354 <__divsi3>
   202d4:	1080004c 	andi	r2,r2,1
   202d8:	1000051e 	bne	r2,zero,202f0 <main+0x60>
			IOWR(PWM_CONTROL_BASE,0,5);
   202dc:	00c00144 	movi	r3,5
   202e0:	00800134 	movhi	r2,4
   202e4:	10843c04 	addi	r2,r2,4336
   202e8:	10c00035 	stwio	r3,0(r2)
   202ec:	00001806 	br	20350 <main+0xc0>
		else if (count%1000 == 0 && (count/1000)%2 == 1)
   202f0:	e0bfff17 	ldw	r2,-4(fp)
   202f4:	0140fa04 	movi	r5,1000
   202f8:	1009883a 	mov	r4,r2
   202fc:	00203d80 	call	203d8 <__modsi3>
   20300:	103fe91e 	bne	r2,zero,202a8 <__alt_data_end+0xfffeca28>
   20304:	e0bfff17 	ldw	r2,-4(fp)
   20308:	0140fa04 	movi	r5,1000
   2030c:	1009883a 	mov	r4,r2
   20310:	00203540 	call	20354 <__divsi3>
   20314:	1007883a 	mov	r3,r2
   20318:	00a00034 	movhi	r2,32768
   2031c:	10800044 	addi	r2,r2,1
   20320:	1884703a 	and	r2,r3,r2
   20324:	1000040e 	bge	r2,zero,20338 <main+0xa8>
   20328:	10bfffc4 	addi	r2,r2,-1
   2032c:	00ffff84 	movi	r3,-2
   20330:	10c4b03a 	or	r2,r2,r3
   20334:	10800044 	addi	r2,r2,1
   20338:	10800058 	cmpnei	r2,r2,1
   2033c:	103fda1e 	bne	r2,zero,202a8 <__alt_data_end+0xfffeca28>
			IOWR(PWM_CONTROL_BASE,0,10);
   20340:	00c00284 	movi	r3,10
   20344:	00800134 	movhi	r2,4
   20348:	10843c04 	addi	r2,r2,4336
   2034c:	10c00035 	stwio	r3,0(r2)
	}
   20350:	003fd506 	br	202a8 <__alt_data_end+0xfffeca28>

00020354 <__divsi3>:
   20354:	20001b16 	blt	r4,zero,203c4 <__divsi3+0x70>
   20358:	000f883a 	mov	r7,zero
   2035c:	28001616 	blt	r5,zero,203b8 <__divsi3+0x64>
   20360:	200d883a 	mov	r6,r4
   20364:	29001a2e 	bgeu	r5,r4,203d0 <__divsi3+0x7c>
   20368:	00800804 	movi	r2,32
   2036c:	00c00044 	movi	r3,1
   20370:	00000106 	br	20378 <__divsi3+0x24>
   20374:	10000d26 	beq	r2,zero,203ac <__divsi3+0x58>
   20378:	294b883a 	add	r5,r5,r5
   2037c:	10bfffc4 	addi	r2,r2,-1
   20380:	18c7883a 	add	r3,r3,r3
   20384:	293ffb36 	bltu	r5,r4,20374 <__alt_data_end+0xfffecaf4>
   20388:	0005883a 	mov	r2,zero
   2038c:	18000726 	beq	r3,zero,203ac <__divsi3+0x58>
   20390:	0005883a 	mov	r2,zero
   20394:	31400236 	bltu	r6,r5,203a0 <__divsi3+0x4c>
   20398:	314dc83a 	sub	r6,r6,r5
   2039c:	10c4b03a 	or	r2,r2,r3
   203a0:	1806d07a 	srli	r3,r3,1
   203a4:	280ad07a 	srli	r5,r5,1
   203a8:	183ffa1e 	bne	r3,zero,20394 <__alt_data_end+0xfffecb14>
   203ac:	38000126 	beq	r7,zero,203b4 <__divsi3+0x60>
   203b0:	0085c83a 	sub	r2,zero,r2
   203b4:	f800283a 	ret
   203b8:	014bc83a 	sub	r5,zero,r5
   203bc:	39c0005c 	xori	r7,r7,1
   203c0:	003fe706 	br	20360 <__alt_data_end+0xfffecae0>
   203c4:	0109c83a 	sub	r4,zero,r4
   203c8:	01c00044 	movi	r7,1
   203cc:	003fe306 	br	2035c <__alt_data_end+0xfffecadc>
   203d0:	00c00044 	movi	r3,1
   203d4:	003fee06 	br	20390 <__alt_data_end+0xfffecb10>

000203d8 <__modsi3>:
   203d8:	20001716 	blt	r4,zero,20438 <__modsi3+0x60>
   203dc:	000f883a 	mov	r7,zero
   203e0:	2005883a 	mov	r2,r4
   203e4:	28001216 	blt	r5,zero,20430 <__modsi3+0x58>
   203e8:	2900162e 	bgeu	r5,r4,20444 <__modsi3+0x6c>
   203ec:	01800804 	movi	r6,32
   203f0:	00c00044 	movi	r3,1
   203f4:	00000106 	br	203fc <__modsi3+0x24>
   203f8:	30000a26 	beq	r6,zero,20424 <__modsi3+0x4c>
   203fc:	294b883a 	add	r5,r5,r5
   20400:	31bfffc4 	addi	r6,r6,-1
   20404:	18c7883a 	add	r3,r3,r3
   20408:	293ffb36 	bltu	r5,r4,203f8 <__alt_data_end+0xfffecb78>
   2040c:	18000526 	beq	r3,zero,20424 <__modsi3+0x4c>
   20410:	1806d07a 	srli	r3,r3,1
   20414:	11400136 	bltu	r2,r5,2041c <__modsi3+0x44>
   20418:	1145c83a 	sub	r2,r2,r5
   2041c:	280ad07a 	srli	r5,r5,1
   20420:	183ffb1e 	bne	r3,zero,20410 <__alt_data_end+0xfffecb90>
   20424:	38000126 	beq	r7,zero,2042c <__modsi3+0x54>
   20428:	0085c83a 	sub	r2,zero,r2
   2042c:	f800283a 	ret
   20430:	014bc83a 	sub	r5,zero,r5
   20434:	003fec06 	br	203e8 <__alt_data_end+0xfffecb68>
   20438:	0109c83a 	sub	r4,zero,r4
   2043c:	01c00044 	movi	r7,1
   20440:	003fe706 	br	203e0 <__alt_data_end+0xfffecb60>
   20444:	00c00044 	movi	r3,1
   20448:	003ff106 	br	20410 <__alt_data_end+0xfffecb90>

0002044c <__udivsi3>:
   2044c:	200d883a 	mov	r6,r4
   20450:	2900152e 	bgeu	r5,r4,204a8 <__udivsi3+0x5c>
   20454:	28001416 	blt	r5,zero,204a8 <__udivsi3+0x5c>
   20458:	00800804 	movi	r2,32
   2045c:	00c00044 	movi	r3,1
   20460:	00000206 	br	2046c <__udivsi3+0x20>
   20464:	10000e26 	beq	r2,zero,204a0 <__udivsi3+0x54>
   20468:	28000516 	blt	r5,zero,20480 <__udivsi3+0x34>
   2046c:	294b883a 	add	r5,r5,r5
   20470:	10bfffc4 	addi	r2,r2,-1
   20474:	18c7883a 	add	r3,r3,r3
   20478:	293ffa36 	bltu	r5,r4,20464 <__alt_data_end+0xfffecbe4>
   2047c:	18000826 	beq	r3,zero,204a0 <__udivsi3+0x54>
   20480:	0005883a 	mov	r2,zero
   20484:	31400236 	bltu	r6,r5,20490 <__udivsi3+0x44>
   20488:	314dc83a 	sub	r6,r6,r5
   2048c:	10c4b03a 	or	r2,r2,r3
   20490:	1806d07a 	srli	r3,r3,1
   20494:	280ad07a 	srli	r5,r5,1
   20498:	183ffa1e 	bne	r3,zero,20484 <__alt_data_end+0xfffecc04>
   2049c:	f800283a 	ret
   204a0:	0005883a 	mov	r2,zero
   204a4:	f800283a 	ret
   204a8:	00c00044 	movi	r3,1
   204ac:	003ff406 	br	20480 <__alt_data_end+0xfffecc00>

000204b0 <__umodsi3>:
   204b0:	2005883a 	mov	r2,r4
   204b4:	2900122e 	bgeu	r5,r4,20500 <__umodsi3+0x50>
   204b8:	28001116 	blt	r5,zero,20500 <__umodsi3+0x50>
   204bc:	01800804 	movi	r6,32
   204c0:	00c00044 	movi	r3,1
   204c4:	00000206 	br	204d0 <__umodsi3+0x20>
   204c8:	30000c26 	beq	r6,zero,204fc <__umodsi3+0x4c>
   204cc:	28000516 	blt	r5,zero,204e4 <__umodsi3+0x34>
   204d0:	294b883a 	add	r5,r5,r5
   204d4:	31bfffc4 	addi	r6,r6,-1
   204d8:	18c7883a 	add	r3,r3,r3
   204dc:	293ffa36 	bltu	r5,r4,204c8 <__alt_data_end+0xfffecc48>
   204e0:	18000626 	beq	r3,zero,204fc <__umodsi3+0x4c>
   204e4:	1806d07a 	srli	r3,r3,1
   204e8:	11400136 	bltu	r2,r5,204f0 <__umodsi3+0x40>
   204ec:	1145c83a 	sub	r2,r2,r5
   204f0:	280ad07a 	srli	r5,r5,1
   204f4:	183ffb1e 	bne	r3,zero,204e4 <__alt_data_end+0xfffecc64>
   204f8:	f800283a 	ret
   204fc:	f800283a 	ret
   20500:	00c00044 	movi	r3,1
   20504:	003ff706 	br	204e4 <__alt_data_end+0xfffecc64>

00020508 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   20508:	defffc04 	addi	sp,sp,-16
   2050c:	df000315 	stw	fp,12(sp)
   20510:	df000304 	addi	fp,sp,12
   20514:	e13ffd15 	stw	r4,-12(fp)
   20518:	e17ffe15 	stw	r5,-8(fp)
   2051c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   20520:	e0fffe17 	ldw	r3,-8(fp)
   20524:	e0bffd17 	ldw	r2,-12(fp)
   20528:	18800c26 	beq	r3,r2,2055c <alt_load_section+0x54>
  {
    while( to != end )
   2052c:	00000806 	br	20550 <alt_load_section+0x48>
    {
      *to++ = *from++;
   20530:	e0bffe17 	ldw	r2,-8(fp)
   20534:	10c00104 	addi	r3,r2,4
   20538:	e0fffe15 	stw	r3,-8(fp)
   2053c:	e0fffd17 	ldw	r3,-12(fp)
   20540:	19000104 	addi	r4,r3,4
   20544:	e13ffd15 	stw	r4,-12(fp)
   20548:	18c00017 	ldw	r3,0(r3)
   2054c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   20550:	e0fffe17 	ldw	r3,-8(fp)
   20554:	e0bfff17 	ldw	r2,-4(fp)
   20558:	18bff51e 	bne	r3,r2,20530 <__alt_data_end+0xfffeccb0>
    {
      *to++ = *from++;
    }
  }
}
   2055c:	0001883a 	nop
   20560:	e037883a 	mov	sp,fp
   20564:	df000017 	ldw	fp,0(sp)
   20568:	dec00104 	addi	sp,sp,4
   2056c:	f800283a 	ret

00020570 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   20570:	defffe04 	addi	sp,sp,-8
   20574:	dfc00115 	stw	ra,4(sp)
   20578:	df000015 	stw	fp,0(sp)
   2057c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   20580:	018000b4 	movhi	r6,2
   20584:	31926a04 	addi	r6,r6,18856
   20588:	014000b4 	movhi	r5,2
   2058c:	294c7204 	addi	r5,r5,12744
   20590:	010000b4 	movhi	r4,2
   20594:	21126a04 	addi	r4,r4,18856
   20598:	00205080 	call	20508 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2059c:	018000b4 	movhi	r6,2
   205a0:	31809104 	addi	r6,r6,580
   205a4:	014000b4 	movhi	r5,2
   205a8:	29400804 	addi	r5,r5,32
   205ac:	010000b4 	movhi	r4,2
   205b0:	21000804 	addi	r4,r4,32
   205b4:	00205080 	call	20508 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   205b8:	018000b4 	movhi	r6,2
   205bc:	318c7204 	addi	r6,r6,12744
   205c0:	014000b4 	movhi	r5,2
   205c4:	294c5c04 	addi	r5,r5,12656
   205c8:	010000b4 	movhi	r4,2
   205cc:	210c5c04 	addi	r4,r4,12656
   205d0:	00205080 	call	20508 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   205d4:	0021f900 	call	21f90 <alt_dcache_flush_all>
  alt_icache_flush_all();
   205d8:	00221a40 	call	221a4 <alt_icache_flush_all>
}
   205dc:	0001883a 	nop
   205e0:	e037883a 	mov	sp,fp
   205e4:	dfc00117 	ldw	ra,4(sp)
   205e8:	df000017 	ldw	fp,0(sp)
   205ec:	dec00204 	addi	sp,sp,8
   205f0:	f800283a 	ret

000205f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   205f4:	defffd04 	addi	sp,sp,-12
   205f8:	dfc00215 	stw	ra,8(sp)
   205fc:	df000115 	stw	fp,4(sp)
   20600:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20604:	0009883a 	mov	r4,zero
   20608:	00208480 	call	20848 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2060c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   20610:	00208800 	call	20880 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   20614:	018000b4 	movhi	r6,2
   20618:	318c5c04 	addi	r6,r6,12656
   2061c:	014000b4 	movhi	r5,2
   20620:	294c5c04 	addi	r5,r5,12656
   20624:	010000b4 	movhi	r4,2
   20628:	210c5c04 	addi	r4,r4,12656
   2062c:	002253c0 	call	2253c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   20630:	00220e40 	call	220e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   20634:	010000b4 	movhi	r4,2
   20638:	21085104 	addi	r4,r4,8516
   2063c:	0022bfc0 	call	22bfc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   20640:	d0a60317 	ldw	r2,-26612(gp)
   20644:	d0e60417 	ldw	r3,-26608(gp)
   20648:	d1260517 	ldw	r4,-26604(gp)
   2064c:	200d883a 	mov	r6,r4
   20650:	180b883a 	mov	r5,r3
   20654:	1009883a 	mov	r4,r2
   20658:	00202900 	call	20290 <main>
   2065c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   20660:	01000044 	movi	r4,1
   20664:	0021ec00 	call	21ec0 <close>
  exit (result);
   20668:	e13fff17 	ldw	r4,-4(fp)
   2066c:	0022c100 	call	22c10 <exit>

00020670 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   20670:	defffa04 	addi	sp,sp,-24
   20674:	df000515 	stw	fp,20(sp)
   20678:	df000504 	addi	fp,sp,20
   2067c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20680:	0005303a 	rdctl	r2,status
   20684:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20688:	e0fffc17 	ldw	r3,-16(fp)
   2068c:	00bfff84 	movi	r2,-2
   20690:	1884703a 	and	r2,r3,r2
   20694:	1001703a 	wrctl	status,r2
  
  return context;
   20698:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2069c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   206a0:	e0bfff17 	ldw	r2,-4(fp)
   206a4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   206a8:	e0bffd17 	ldw	r2,-12(fp)
   206ac:	10800017 	ldw	r2,0(r2)
   206b0:	e0fffd17 	ldw	r3,-12(fp)
   206b4:	18c00117 	ldw	r3,4(r3)
   206b8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   206bc:	e0bffd17 	ldw	r2,-12(fp)
   206c0:	10800117 	ldw	r2,4(r2)
   206c4:	e0fffd17 	ldw	r3,-12(fp)
   206c8:	18c00017 	ldw	r3,0(r3)
   206cc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   206d0:	e0bffd17 	ldw	r2,-12(fp)
   206d4:	e0fffd17 	ldw	r3,-12(fp)
   206d8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   206dc:	e0bffd17 	ldw	r2,-12(fp)
   206e0:	e0fffd17 	ldw	r3,-12(fp)
   206e4:	10c00015 	stw	r3,0(r2)
   206e8:	e0bffb17 	ldw	r2,-20(fp)
   206ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   206f0:	e0bffe17 	ldw	r2,-8(fp)
   206f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   206f8:	0001883a 	nop
   206fc:	e037883a 	mov	sp,fp
   20700:	df000017 	ldw	fp,0(sp)
   20704:	dec00104 	addi	sp,sp,4
   20708:	f800283a 	ret

0002070c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2070c:	defffb04 	addi	sp,sp,-20
   20710:	dfc00415 	stw	ra,16(sp)
   20714:	df000315 	stw	fp,12(sp)
   20718:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2071c:	d0a00017 	ldw	r2,-32768(gp)
   20720:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   20724:	d0a60717 	ldw	r2,-26596(gp)
   20728:	10800044 	addi	r2,r2,1
   2072c:	d0a60715 	stw	r2,-26596(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   20730:	00002e06 	br	207ec <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   20734:	e0bffd17 	ldw	r2,-12(fp)
   20738:	10800017 	ldw	r2,0(r2)
   2073c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   20740:	e0bffd17 	ldw	r2,-12(fp)
   20744:	10800403 	ldbu	r2,16(r2)
   20748:	10803fcc 	andi	r2,r2,255
   2074c:	10000426 	beq	r2,zero,20760 <alt_tick+0x54>
   20750:	d0a60717 	ldw	r2,-26596(gp)
   20754:	1000021e 	bne	r2,zero,20760 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   20758:	e0bffd17 	ldw	r2,-12(fp)
   2075c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   20760:	e0bffd17 	ldw	r2,-12(fp)
   20764:	10800217 	ldw	r2,8(r2)
   20768:	d0e60717 	ldw	r3,-26596(gp)
   2076c:	18801d36 	bltu	r3,r2,207e4 <alt_tick+0xd8>
   20770:	e0bffd17 	ldw	r2,-12(fp)
   20774:	10800403 	ldbu	r2,16(r2)
   20778:	10803fcc 	andi	r2,r2,255
   2077c:	1000191e 	bne	r2,zero,207e4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   20780:	e0bffd17 	ldw	r2,-12(fp)
   20784:	10800317 	ldw	r2,12(r2)
   20788:	e0fffd17 	ldw	r3,-12(fp)
   2078c:	18c00517 	ldw	r3,20(r3)
   20790:	1809883a 	mov	r4,r3
   20794:	103ee83a 	callr	r2
   20798:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2079c:	e0bfff17 	ldw	r2,-4(fp)
   207a0:	1000031e 	bne	r2,zero,207b0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   207a4:	e13ffd17 	ldw	r4,-12(fp)
   207a8:	00206700 	call	20670 <alt_alarm_stop>
   207ac:	00000d06 	br	207e4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   207b0:	e0bffd17 	ldw	r2,-12(fp)
   207b4:	10c00217 	ldw	r3,8(r2)
   207b8:	e0bfff17 	ldw	r2,-4(fp)
   207bc:	1887883a 	add	r3,r3,r2
   207c0:	e0bffd17 	ldw	r2,-12(fp)
   207c4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   207c8:	e0bffd17 	ldw	r2,-12(fp)
   207cc:	10c00217 	ldw	r3,8(r2)
   207d0:	d0a60717 	ldw	r2,-26596(gp)
   207d4:	1880032e 	bgeu	r3,r2,207e4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   207d8:	e0bffd17 	ldw	r2,-12(fp)
   207dc:	00c00044 	movi	r3,1
   207e0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   207e4:	e0bffe17 	ldw	r2,-8(fp)
   207e8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   207ec:	e0fffd17 	ldw	r3,-12(fp)
   207f0:	d0a00004 	addi	r2,gp,-32768
   207f4:	18bfcf1e 	bne	r3,r2,20734 <__alt_data_end+0xfffeceb4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   207f8:	0001883a 	nop
}
   207fc:	0001883a 	nop
   20800:	e037883a 	mov	sp,fp
   20804:	dfc00117 	ldw	ra,4(sp)
   20808:	df000017 	ldw	fp,0(sp)
   2080c:	dec00204 	addi	sp,sp,8
   20810:	f800283a 	ret

00020814 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   20814:	defffd04 	addi	sp,sp,-12
   20818:	dfc00215 	stw	ra,8(sp)
   2081c:	df000115 	stw	fp,4(sp)
   20820:	df000104 	addi	fp,sp,4
   20824:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   20828:	d1600404 	addi	r5,gp,-32752
   2082c:	e13fff17 	ldw	r4,-4(fp)
   20830:	00220400 	call	22040 <alt_dev_llist_insert>
}
   20834:	e037883a 	mov	sp,fp
   20838:	dfc00117 	ldw	ra,4(sp)
   2083c:	df000017 	ldw	fp,0(sp)
   20840:	dec00204 	addi	sp,sp,8
   20844:	f800283a 	ret

00020848 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   20848:	defffd04 	addi	sp,sp,-12
   2084c:	dfc00215 	stw	ra,8(sp)
   20850:	df000115 	stw	fp,4(sp)
   20854:	df000104 	addi	fp,sp,4
   20858:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   2085c:	00228700 	call	22870 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20860:	00800044 	movi	r2,1
   20864:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20868:	0001883a 	nop
   2086c:	e037883a 	mov	sp,fp
   20870:	dfc00117 	ldw	ra,4(sp)
   20874:	df000017 	ldw	fp,0(sp)
   20878:	dec00204 	addi	sp,sp,8
   2087c:	f800283a 	ret

00020880 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   20880:	defffe04 	addi	sp,sp,-8
   20884:	dfc00115 	stw	ra,4(sp)
   20888:	df000015 	stw	fp,0(sp)
   2088c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, sys_timer);
   20890:	01c0fa04 	movi	r7,1000
   20894:	018000c4 	movi	r6,3
   20898:	000b883a 	mov	r5,zero
   2089c:	01000134 	movhi	r4,4
   208a0:	21040004 	addi	r4,r4,4096
   208a4:	00214040 	call	21404 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   208a8:	01800084 	movi	r6,2
   208ac:	000b883a 	mov	r5,zero
   208b0:	010000b4 	movhi	r4,2
   208b4:	210c7c04 	addi	r4,r4,12784
   208b8:	0020a880 	call	20a88 <altera_avalon_jtag_uart_init>
   208bc:	010000b4 	movhi	r4,2
   208c0:	210c7204 	addi	r4,r4,12744
   208c4:	00208140 	call	20814 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   208c8:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( FP1_CONTROL, fp1_control);
   208cc:	000d883a 	mov	r6,zero
   208d0:	000b883a 	mov	r5,zero
   208d4:	010000b4 	movhi	r4,2
   208d8:	21109404 	addi	r4,r4,16976
   208dc:	00215900 	call	21590 <altera_avalon_uart_init>
   208e0:	010000b4 	movhi	r4,2
   208e4:	21108a04 	addi	r4,r4,16936
   208e8:	00208140 	call	20814 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( FP2_CONTROL, fp2_control);
   208ec:	01800044 	movi	r6,1
   208f0:	000b883a 	mov	r5,zero
   208f4:	010000b4 	movhi	r4,2
   208f8:	2110c504 	addi	r4,r4,17172
   208fc:	00215900 	call	21590 <altera_avalon_uart_init>
   20900:	010000b4 	movhi	r4,2
   20904:	2110bb04 	addi	r4,r4,17132
   20908:	00208140 	call	20814 <alt_dev_reg>
}
   2090c:	0001883a 	nop
   20910:	e037883a 	mov	sp,fp
   20914:	dfc00117 	ldw	ra,4(sp)
   20918:	df000017 	ldw	fp,0(sp)
   2091c:	dec00204 	addi	sp,sp,8
   20920:	f800283a 	ret

00020924 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   20924:	defffa04 	addi	sp,sp,-24
   20928:	dfc00515 	stw	ra,20(sp)
   2092c:	df000415 	stw	fp,16(sp)
   20930:	df000404 	addi	fp,sp,16
   20934:	e13ffd15 	stw	r4,-12(fp)
   20938:	e17ffe15 	stw	r5,-8(fp)
   2093c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20940:	e0bffd17 	ldw	r2,-12(fp)
   20944:	10800017 	ldw	r2,0(r2)
   20948:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2094c:	e0bffc17 	ldw	r2,-16(fp)
   20950:	10c00a04 	addi	r3,r2,40
   20954:	e0bffd17 	ldw	r2,-12(fp)
   20958:	10800217 	ldw	r2,8(r2)
   2095c:	100f883a 	mov	r7,r2
   20960:	e1bfff17 	ldw	r6,-4(fp)
   20964:	e17ffe17 	ldw	r5,-8(fp)
   20968:	1809883a 	mov	r4,r3
   2096c:	0020f4c0 	call	20f4c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   20970:	e037883a 	mov	sp,fp
   20974:	dfc00117 	ldw	ra,4(sp)
   20978:	df000017 	ldw	fp,0(sp)
   2097c:	dec00204 	addi	sp,sp,8
   20980:	f800283a 	ret

00020984 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   20984:	defffa04 	addi	sp,sp,-24
   20988:	dfc00515 	stw	ra,20(sp)
   2098c:	df000415 	stw	fp,16(sp)
   20990:	df000404 	addi	fp,sp,16
   20994:	e13ffd15 	stw	r4,-12(fp)
   20998:	e17ffe15 	stw	r5,-8(fp)
   2099c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   209a0:	e0bffd17 	ldw	r2,-12(fp)
   209a4:	10800017 	ldw	r2,0(r2)
   209a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   209ac:	e0bffc17 	ldw	r2,-16(fp)
   209b0:	10c00a04 	addi	r3,r2,40
   209b4:	e0bffd17 	ldw	r2,-12(fp)
   209b8:	10800217 	ldw	r2,8(r2)
   209bc:	100f883a 	mov	r7,r2
   209c0:	e1bfff17 	ldw	r6,-4(fp)
   209c4:	e17ffe17 	ldw	r5,-8(fp)
   209c8:	1809883a 	mov	r4,r3
   209cc:	00211680 	call	21168 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   209d0:	e037883a 	mov	sp,fp
   209d4:	dfc00117 	ldw	ra,4(sp)
   209d8:	df000017 	ldw	fp,0(sp)
   209dc:	dec00204 	addi	sp,sp,8
   209e0:	f800283a 	ret

000209e4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   209e4:	defffc04 	addi	sp,sp,-16
   209e8:	dfc00315 	stw	ra,12(sp)
   209ec:	df000215 	stw	fp,8(sp)
   209f0:	df000204 	addi	fp,sp,8
   209f4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   209f8:	e0bfff17 	ldw	r2,-4(fp)
   209fc:	10800017 	ldw	r2,0(r2)
   20a00:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   20a04:	e0bffe17 	ldw	r2,-8(fp)
   20a08:	10c00a04 	addi	r3,r2,40
   20a0c:	e0bfff17 	ldw	r2,-4(fp)
   20a10:	10800217 	ldw	r2,8(r2)
   20a14:	100b883a 	mov	r5,r2
   20a18:	1809883a 	mov	r4,r3
   20a1c:	0020df40 	call	20df4 <altera_avalon_jtag_uart_close>
}
   20a20:	e037883a 	mov	sp,fp
   20a24:	dfc00117 	ldw	ra,4(sp)
   20a28:	df000017 	ldw	fp,0(sp)
   20a2c:	dec00204 	addi	sp,sp,8
   20a30:	f800283a 	ret

00020a34 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   20a34:	defffa04 	addi	sp,sp,-24
   20a38:	dfc00515 	stw	ra,20(sp)
   20a3c:	df000415 	stw	fp,16(sp)
   20a40:	df000404 	addi	fp,sp,16
   20a44:	e13ffd15 	stw	r4,-12(fp)
   20a48:	e17ffe15 	stw	r5,-8(fp)
   20a4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   20a50:	e0bffd17 	ldw	r2,-12(fp)
   20a54:	10800017 	ldw	r2,0(r2)
   20a58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   20a5c:	e0bffc17 	ldw	r2,-16(fp)
   20a60:	10800a04 	addi	r2,r2,40
   20a64:	e1bfff17 	ldw	r6,-4(fp)
   20a68:	e17ffe17 	ldw	r5,-8(fp)
   20a6c:	1009883a 	mov	r4,r2
   20a70:	0020e5c0 	call	20e5c <altera_avalon_jtag_uart_ioctl>
}
   20a74:	e037883a 	mov	sp,fp
   20a78:	dfc00117 	ldw	ra,4(sp)
   20a7c:	df000017 	ldw	fp,0(sp)
   20a80:	dec00204 	addi	sp,sp,8
   20a84:	f800283a 	ret

00020a88 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   20a88:	defffa04 	addi	sp,sp,-24
   20a8c:	dfc00515 	stw	ra,20(sp)
   20a90:	df000415 	stw	fp,16(sp)
   20a94:	df000404 	addi	fp,sp,16
   20a98:	e13ffd15 	stw	r4,-12(fp)
   20a9c:	e17ffe15 	stw	r5,-8(fp)
   20aa0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20aa4:	e0bffd17 	ldw	r2,-12(fp)
   20aa8:	00c00044 	movi	r3,1
   20aac:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   20ab0:	e0bffd17 	ldw	r2,-12(fp)
   20ab4:	10800017 	ldw	r2,0(r2)
   20ab8:	10800104 	addi	r2,r2,4
   20abc:	1007883a 	mov	r3,r2
   20ac0:	e0bffd17 	ldw	r2,-12(fp)
   20ac4:	10800817 	ldw	r2,32(r2)
   20ac8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   20acc:	e0bffe17 	ldw	r2,-8(fp)
   20ad0:	e0ffff17 	ldw	r3,-4(fp)
   20ad4:	d8000015 	stw	zero,0(sp)
   20ad8:	e1fffd17 	ldw	r7,-12(fp)
   20adc:	018000b4 	movhi	r6,2
   20ae0:	3182d204 	addi	r6,r6,2888
   20ae4:	180b883a 	mov	r5,r3
   20ae8:	1009883a 	mov	r4,r2
   20aec:	00221d80 	call	221d8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   20af0:	e0bffd17 	ldw	r2,-12(fp)
   20af4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   20af8:	e0bffd17 	ldw	r2,-12(fp)
   20afc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   20b00:	d0e60617 	ldw	r3,-26600(gp)
   20b04:	e1fffd17 	ldw	r7,-12(fp)
   20b08:	018000b4 	movhi	r6,2
   20b0c:	31835504 	addi	r6,r6,3412
   20b10:	180b883a 	mov	r5,r3
   20b14:	1009883a 	mov	r4,r2
   20b18:	0021d580 	call	21d58 <alt_alarm_start>
   20b1c:	1000040e 	bge	r2,zero,20b30 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   20b20:	e0fffd17 	ldw	r3,-12(fp)
   20b24:	00a00034 	movhi	r2,32768
   20b28:	10bfffc4 	addi	r2,r2,-1
   20b2c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   20b30:	0001883a 	nop
   20b34:	e037883a 	mov	sp,fp
   20b38:	dfc00117 	ldw	ra,4(sp)
   20b3c:	df000017 	ldw	fp,0(sp)
   20b40:	dec00204 	addi	sp,sp,8
   20b44:	f800283a 	ret

00020b48 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   20b48:	defff804 	addi	sp,sp,-32
   20b4c:	df000715 	stw	fp,28(sp)
   20b50:	df000704 	addi	fp,sp,28
   20b54:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   20b58:	e0bfff17 	ldw	r2,-4(fp)
   20b5c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   20b60:	e0bffb17 	ldw	r2,-20(fp)
   20b64:	10800017 	ldw	r2,0(r2)
   20b68:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20b6c:	e0bffc17 	ldw	r2,-16(fp)
   20b70:	10800104 	addi	r2,r2,4
   20b74:	10800037 	ldwio	r2,0(r2)
   20b78:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   20b7c:	e0bffd17 	ldw	r2,-12(fp)
   20b80:	1080c00c 	andi	r2,r2,768
   20b84:	10006d26 	beq	r2,zero,20d3c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   20b88:	e0bffd17 	ldw	r2,-12(fp)
   20b8c:	1080400c 	andi	r2,r2,256
   20b90:	10003526 	beq	r2,zero,20c68 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   20b94:	00800074 	movhi	r2,1
   20b98:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20b9c:	e0bffb17 	ldw	r2,-20(fp)
   20ba0:	10800a17 	ldw	r2,40(r2)
   20ba4:	10800044 	addi	r2,r2,1
   20ba8:	1081ffcc 	andi	r2,r2,2047
   20bac:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   20bb0:	e0bffb17 	ldw	r2,-20(fp)
   20bb4:	10c00b17 	ldw	r3,44(r2)
   20bb8:	e0bffe17 	ldw	r2,-8(fp)
   20bbc:	18801526 	beq	r3,r2,20c14 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   20bc0:	e0bffc17 	ldw	r2,-16(fp)
   20bc4:	10800037 	ldwio	r2,0(r2)
   20bc8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   20bcc:	e0bff917 	ldw	r2,-28(fp)
   20bd0:	10a0000c 	andi	r2,r2,32768
   20bd4:	10001126 	beq	r2,zero,20c1c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   20bd8:	e0bffb17 	ldw	r2,-20(fp)
   20bdc:	10800a17 	ldw	r2,40(r2)
   20be0:	e0fff917 	ldw	r3,-28(fp)
   20be4:	1809883a 	mov	r4,r3
   20be8:	e0fffb17 	ldw	r3,-20(fp)
   20bec:	1885883a 	add	r2,r3,r2
   20bf0:	10800e04 	addi	r2,r2,56
   20bf4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20bf8:	e0bffb17 	ldw	r2,-20(fp)
   20bfc:	10800a17 	ldw	r2,40(r2)
   20c00:	10800044 	addi	r2,r2,1
   20c04:	10c1ffcc 	andi	r3,r2,2047
   20c08:	e0bffb17 	ldw	r2,-20(fp)
   20c0c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   20c10:	003fe206 	br	20b9c <__alt_data_end+0xfffed31c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   20c14:	0001883a 	nop
   20c18:	00000106 	br	20c20 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   20c1c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   20c20:	e0bff917 	ldw	r2,-28(fp)
   20c24:	10bfffec 	andhi	r2,r2,65535
   20c28:	10000f26 	beq	r2,zero,20c68 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20c2c:	e0bffb17 	ldw	r2,-20(fp)
   20c30:	10c00817 	ldw	r3,32(r2)
   20c34:	00bfff84 	movi	r2,-2
   20c38:	1886703a 	and	r3,r3,r2
   20c3c:	e0bffb17 	ldw	r2,-20(fp)
   20c40:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   20c44:	e0bffc17 	ldw	r2,-16(fp)
   20c48:	10800104 	addi	r2,r2,4
   20c4c:	1007883a 	mov	r3,r2
   20c50:	e0bffb17 	ldw	r2,-20(fp)
   20c54:	10800817 	ldw	r2,32(r2)
   20c58:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20c5c:	e0bffc17 	ldw	r2,-16(fp)
   20c60:	10800104 	addi	r2,r2,4
   20c64:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   20c68:	e0bffd17 	ldw	r2,-12(fp)
   20c6c:	1080800c 	andi	r2,r2,512
   20c70:	103fbe26 	beq	r2,zero,20b6c <__alt_data_end+0xfffed2ec>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   20c74:	e0bffd17 	ldw	r2,-12(fp)
   20c78:	1004d43a 	srli	r2,r2,16
   20c7c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   20c80:	00001406 	br	20cd4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   20c84:	e0bffc17 	ldw	r2,-16(fp)
   20c88:	e0fffb17 	ldw	r3,-20(fp)
   20c8c:	18c00d17 	ldw	r3,52(r3)
   20c90:	e13ffb17 	ldw	r4,-20(fp)
   20c94:	20c7883a 	add	r3,r4,r3
   20c98:	18c20e04 	addi	r3,r3,2104
   20c9c:	18c00003 	ldbu	r3,0(r3)
   20ca0:	18c03fcc 	andi	r3,r3,255
   20ca4:	18c0201c 	xori	r3,r3,128
   20ca8:	18ffe004 	addi	r3,r3,-128
   20cac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20cb0:	e0bffb17 	ldw	r2,-20(fp)
   20cb4:	10800d17 	ldw	r2,52(r2)
   20cb8:	10800044 	addi	r2,r2,1
   20cbc:	10c1ffcc 	andi	r3,r2,2047
   20cc0:	e0bffb17 	ldw	r2,-20(fp)
   20cc4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   20cc8:	e0bffa17 	ldw	r2,-24(fp)
   20ccc:	10bfffc4 	addi	r2,r2,-1
   20cd0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   20cd4:	e0bffa17 	ldw	r2,-24(fp)
   20cd8:	10000526 	beq	r2,zero,20cf0 <altera_avalon_jtag_uart_irq+0x1a8>
   20cdc:	e0bffb17 	ldw	r2,-20(fp)
   20ce0:	10c00d17 	ldw	r3,52(r2)
   20ce4:	e0bffb17 	ldw	r2,-20(fp)
   20ce8:	10800c17 	ldw	r2,48(r2)
   20cec:	18bfe51e 	bne	r3,r2,20c84 <__alt_data_end+0xfffed404>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   20cf0:	e0bffa17 	ldw	r2,-24(fp)
   20cf4:	103f9d26 	beq	r2,zero,20b6c <__alt_data_end+0xfffed2ec>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   20cf8:	e0bffb17 	ldw	r2,-20(fp)
   20cfc:	10c00817 	ldw	r3,32(r2)
   20d00:	00bfff44 	movi	r2,-3
   20d04:	1886703a 	and	r3,r3,r2
   20d08:	e0bffb17 	ldw	r2,-20(fp)
   20d0c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20d10:	e0bffb17 	ldw	r2,-20(fp)
   20d14:	10800017 	ldw	r2,0(r2)
   20d18:	10800104 	addi	r2,r2,4
   20d1c:	1007883a 	mov	r3,r2
   20d20:	e0bffb17 	ldw	r2,-20(fp)
   20d24:	10800817 	ldw	r2,32(r2)
   20d28:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20d2c:	e0bffc17 	ldw	r2,-16(fp)
   20d30:	10800104 	addi	r2,r2,4
   20d34:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   20d38:	003f8c06 	br	20b6c <__alt_data_end+0xfffed2ec>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   20d3c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   20d40:	0001883a 	nop
   20d44:	e037883a 	mov	sp,fp
   20d48:	df000017 	ldw	fp,0(sp)
   20d4c:	dec00104 	addi	sp,sp,4
   20d50:	f800283a 	ret

00020d54 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   20d54:	defff804 	addi	sp,sp,-32
   20d58:	df000715 	stw	fp,28(sp)
   20d5c:	df000704 	addi	fp,sp,28
   20d60:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   20d64:	e0bffb17 	ldw	r2,-20(fp)
   20d68:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   20d6c:	e0bff917 	ldw	r2,-28(fp)
   20d70:	10800017 	ldw	r2,0(r2)
   20d74:	10800104 	addi	r2,r2,4
   20d78:	10800037 	ldwio	r2,0(r2)
   20d7c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   20d80:	e0bffa17 	ldw	r2,-24(fp)
   20d84:	1081000c 	andi	r2,r2,1024
   20d88:	10000b26 	beq	r2,zero,20db8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   20d8c:	e0bff917 	ldw	r2,-28(fp)
   20d90:	10800017 	ldw	r2,0(r2)
   20d94:	10800104 	addi	r2,r2,4
   20d98:	1007883a 	mov	r3,r2
   20d9c:	e0bff917 	ldw	r2,-28(fp)
   20da0:	10800817 	ldw	r2,32(r2)
   20da4:	10810014 	ori	r2,r2,1024
   20da8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   20dac:	e0bff917 	ldw	r2,-28(fp)
   20db0:	10000915 	stw	zero,36(r2)
   20db4:	00000a06 	br	20de0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   20db8:	e0bff917 	ldw	r2,-28(fp)
   20dbc:	10c00917 	ldw	r3,36(r2)
   20dc0:	00a00034 	movhi	r2,32768
   20dc4:	10bfff04 	addi	r2,r2,-4
   20dc8:	10c00536 	bltu	r2,r3,20de0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   20dcc:	e0bff917 	ldw	r2,-28(fp)
   20dd0:	10800917 	ldw	r2,36(r2)
   20dd4:	10c00044 	addi	r3,r2,1
   20dd8:	e0bff917 	ldw	r2,-28(fp)
   20ddc:	10c00915 	stw	r3,36(r2)
   20de0:	d0a60617 	ldw	r2,-26600(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   20de4:	e037883a 	mov	sp,fp
   20de8:	df000017 	ldw	fp,0(sp)
   20dec:	dec00104 	addi	sp,sp,4
   20df0:	f800283a 	ret

00020df4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   20df4:	defffd04 	addi	sp,sp,-12
   20df8:	df000215 	stw	fp,8(sp)
   20dfc:	df000204 	addi	fp,sp,8
   20e00:	e13ffe15 	stw	r4,-8(fp)
   20e04:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   20e08:	00000506 	br	20e20 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   20e0c:	e0bfff17 	ldw	r2,-4(fp)
   20e10:	1090000c 	andi	r2,r2,16384
   20e14:	10000226 	beq	r2,zero,20e20 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   20e18:	00bffd44 	movi	r2,-11
   20e1c:	00000b06 	br	20e4c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   20e20:	e0bffe17 	ldw	r2,-8(fp)
   20e24:	10c00d17 	ldw	r3,52(r2)
   20e28:	e0bffe17 	ldw	r2,-8(fp)
   20e2c:	10800c17 	ldw	r2,48(r2)
   20e30:	18800526 	beq	r3,r2,20e48 <altera_avalon_jtag_uart_close+0x54>
   20e34:	e0bffe17 	ldw	r2,-8(fp)
   20e38:	10c00917 	ldw	r3,36(r2)
   20e3c:	e0bffe17 	ldw	r2,-8(fp)
   20e40:	10800117 	ldw	r2,4(r2)
   20e44:	18bff136 	bltu	r3,r2,20e0c <__alt_data_end+0xfffed58c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   20e48:	0005883a 	mov	r2,zero
}
   20e4c:	e037883a 	mov	sp,fp
   20e50:	df000017 	ldw	fp,0(sp)
   20e54:	dec00104 	addi	sp,sp,4
   20e58:	f800283a 	ret

00020e5c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   20e5c:	defffa04 	addi	sp,sp,-24
   20e60:	df000515 	stw	fp,20(sp)
   20e64:	df000504 	addi	fp,sp,20
   20e68:	e13ffd15 	stw	r4,-12(fp)
   20e6c:	e17ffe15 	stw	r5,-8(fp)
   20e70:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   20e74:	00bff9c4 	movi	r2,-25
   20e78:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   20e7c:	e0bffe17 	ldw	r2,-8(fp)
   20e80:	10da8060 	cmpeqi	r3,r2,27137
   20e84:	1800031e 	bne	r3,zero,20e94 <altera_avalon_jtag_uart_ioctl+0x38>
   20e88:	109a80a0 	cmpeqi	r2,r2,27138
   20e8c:	1000181e 	bne	r2,zero,20ef0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   20e90:	00002906 	br	20f38 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   20e94:	e0bffd17 	ldw	r2,-12(fp)
   20e98:	10c00117 	ldw	r3,4(r2)
   20e9c:	00a00034 	movhi	r2,32768
   20ea0:	10bfffc4 	addi	r2,r2,-1
   20ea4:	18802126 	beq	r3,r2,20f2c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   20ea8:	e0bfff17 	ldw	r2,-4(fp)
   20eac:	10800017 	ldw	r2,0(r2)
   20eb0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   20eb4:	e0bffc17 	ldw	r2,-16(fp)
   20eb8:	10800090 	cmplti	r2,r2,2
   20ebc:	1000061e 	bne	r2,zero,20ed8 <altera_avalon_jtag_uart_ioctl+0x7c>
   20ec0:	e0fffc17 	ldw	r3,-16(fp)
   20ec4:	00a00034 	movhi	r2,32768
   20ec8:	10bfffc4 	addi	r2,r2,-1
   20ecc:	18800226 	beq	r3,r2,20ed8 <altera_avalon_jtag_uart_ioctl+0x7c>
   20ed0:	e0bffc17 	ldw	r2,-16(fp)
   20ed4:	00000206 	br	20ee0 <altera_avalon_jtag_uart_ioctl+0x84>
   20ed8:	00a00034 	movhi	r2,32768
   20edc:	10bfff84 	addi	r2,r2,-2
   20ee0:	e0fffd17 	ldw	r3,-12(fp)
   20ee4:	18800115 	stw	r2,4(r3)
      rc = 0;
   20ee8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   20eec:	00000f06 	br	20f2c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   20ef0:	e0bffd17 	ldw	r2,-12(fp)
   20ef4:	10c00117 	ldw	r3,4(r2)
   20ef8:	00a00034 	movhi	r2,32768
   20efc:	10bfffc4 	addi	r2,r2,-1
   20f00:	18800c26 	beq	r3,r2,20f34 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   20f04:	e0bffd17 	ldw	r2,-12(fp)
   20f08:	10c00917 	ldw	r3,36(r2)
   20f0c:	e0bffd17 	ldw	r2,-12(fp)
   20f10:	10800117 	ldw	r2,4(r2)
   20f14:	1885803a 	cmpltu	r2,r3,r2
   20f18:	10c03fcc 	andi	r3,r2,255
   20f1c:	e0bfff17 	ldw	r2,-4(fp)
   20f20:	10c00015 	stw	r3,0(r2)
      rc = 0;
   20f24:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   20f28:	00000206 	br	20f34 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   20f2c:	0001883a 	nop
   20f30:	00000106 	br	20f38 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   20f34:	0001883a 	nop

  default:
    break;
  }

  return rc;
   20f38:	e0bffb17 	ldw	r2,-20(fp)
}
   20f3c:	e037883a 	mov	sp,fp
   20f40:	df000017 	ldw	fp,0(sp)
   20f44:	dec00104 	addi	sp,sp,4
   20f48:	f800283a 	ret

00020f4c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   20f4c:	defff304 	addi	sp,sp,-52
   20f50:	dfc00c15 	stw	ra,48(sp)
   20f54:	df000b15 	stw	fp,44(sp)
   20f58:	df000b04 	addi	fp,sp,44
   20f5c:	e13ffc15 	stw	r4,-16(fp)
   20f60:	e17ffd15 	stw	r5,-12(fp)
   20f64:	e1bffe15 	stw	r6,-8(fp)
   20f68:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   20f6c:	e0bffd17 	ldw	r2,-12(fp)
   20f70:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   20f74:	00004706 	br	21094 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   20f78:	e0bffc17 	ldw	r2,-16(fp)
   20f7c:	10800a17 	ldw	r2,40(r2)
   20f80:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   20f84:	e0bffc17 	ldw	r2,-16(fp)
   20f88:	10800b17 	ldw	r2,44(r2)
   20f8c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   20f90:	e0fff717 	ldw	r3,-36(fp)
   20f94:	e0bff817 	ldw	r2,-32(fp)
   20f98:	18800536 	bltu	r3,r2,20fb0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   20f9c:	e0fff717 	ldw	r3,-36(fp)
   20fa0:	e0bff817 	ldw	r2,-32(fp)
   20fa4:	1885c83a 	sub	r2,r3,r2
   20fa8:	e0bff615 	stw	r2,-40(fp)
   20fac:	00000406 	br	20fc0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   20fb0:	00c20004 	movi	r3,2048
   20fb4:	e0bff817 	ldw	r2,-32(fp)
   20fb8:	1885c83a 	sub	r2,r3,r2
   20fbc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   20fc0:	e0bff617 	ldw	r2,-40(fp)
   20fc4:	10001e26 	beq	r2,zero,21040 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   20fc8:	e0fffe17 	ldw	r3,-8(fp)
   20fcc:	e0bff617 	ldw	r2,-40(fp)
   20fd0:	1880022e 	bgeu	r3,r2,20fdc <altera_avalon_jtag_uart_read+0x90>
        n = space;
   20fd4:	e0bffe17 	ldw	r2,-8(fp)
   20fd8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   20fdc:	e0bffc17 	ldw	r2,-16(fp)
   20fe0:	10c00e04 	addi	r3,r2,56
   20fe4:	e0bff817 	ldw	r2,-32(fp)
   20fe8:	1885883a 	add	r2,r3,r2
   20fec:	e1bff617 	ldw	r6,-40(fp)
   20ff0:	100b883a 	mov	r5,r2
   20ff4:	e13ff517 	ldw	r4,-44(fp)
   20ff8:	0022cc40 	call	22cc4 <memcpy>
      ptr   += n;
   20ffc:	e0fff517 	ldw	r3,-44(fp)
   21000:	e0bff617 	ldw	r2,-40(fp)
   21004:	1885883a 	add	r2,r3,r2
   21008:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2100c:	e0fffe17 	ldw	r3,-8(fp)
   21010:	e0bff617 	ldw	r2,-40(fp)
   21014:	1885c83a 	sub	r2,r3,r2
   21018:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2101c:	e0fff817 	ldw	r3,-32(fp)
   21020:	e0bff617 	ldw	r2,-40(fp)
   21024:	1885883a 	add	r2,r3,r2
   21028:	10c1ffcc 	andi	r3,r2,2047
   2102c:	e0bffc17 	ldw	r2,-16(fp)
   21030:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   21034:	e0bffe17 	ldw	r2,-8(fp)
   21038:	00bfcf16 	blt	zero,r2,20f78 <__alt_data_end+0xfffed6f8>
   2103c:	00000106 	br	21044 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   21040:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   21044:	e0fff517 	ldw	r3,-44(fp)
   21048:	e0bffd17 	ldw	r2,-12(fp)
   2104c:	1880141e 	bne	r3,r2,210a0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   21050:	e0bfff17 	ldw	r2,-4(fp)
   21054:	1090000c 	andi	r2,r2,16384
   21058:	1000131e 	bne	r2,zero,210a8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2105c:	0001883a 	nop
   21060:	e0bffc17 	ldw	r2,-16(fp)
   21064:	10c00a17 	ldw	r3,40(r2)
   21068:	e0bff717 	ldw	r2,-36(fp)
   2106c:	1880051e 	bne	r3,r2,21084 <altera_avalon_jtag_uart_read+0x138>
   21070:	e0bffc17 	ldw	r2,-16(fp)
   21074:	10c00917 	ldw	r3,36(r2)
   21078:	e0bffc17 	ldw	r2,-16(fp)
   2107c:	10800117 	ldw	r2,4(r2)
   21080:	18bff736 	bltu	r3,r2,21060 <__alt_data_end+0xfffed7e0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   21084:	e0bffc17 	ldw	r2,-16(fp)
   21088:	10c00a17 	ldw	r3,40(r2)
   2108c:	e0bff717 	ldw	r2,-36(fp)
   21090:	18800726 	beq	r3,r2,210b0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   21094:	e0bffe17 	ldw	r2,-8(fp)
   21098:	00bfb716 	blt	zero,r2,20f78 <__alt_data_end+0xfffed6f8>
   2109c:	00000506 	br	210b4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   210a0:	0001883a 	nop
   210a4:	00000306 	br	210b4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   210a8:	0001883a 	nop
   210ac:	00000106 	br	210b4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   210b0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   210b4:	e0fff517 	ldw	r3,-44(fp)
   210b8:	e0bffd17 	ldw	r2,-12(fp)
   210bc:	18801826 	beq	r3,r2,21120 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   210c0:	0005303a 	rdctl	r2,status
   210c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   210c8:	e0fffb17 	ldw	r3,-20(fp)
   210cc:	00bfff84 	movi	r2,-2
   210d0:	1884703a 	and	r2,r3,r2
   210d4:	1001703a 	wrctl	status,r2
  
  return context;
   210d8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   210dc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   210e0:	e0bffc17 	ldw	r2,-16(fp)
   210e4:	10800817 	ldw	r2,32(r2)
   210e8:	10c00054 	ori	r3,r2,1
   210ec:	e0bffc17 	ldw	r2,-16(fp)
   210f0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   210f4:	e0bffc17 	ldw	r2,-16(fp)
   210f8:	10800017 	ldw	r2,0(r2)
   210fc:	10800104 	addi	r2,r2,4
   21100:	1007883a 	mov	r3,r2
   21104:	e0bffc17 	ldw	r2,-16(fp)
   21108:	10800817 	ldw	r2,32(r2)
   2110c:	18800035 	stwio	r2,0(r3)
   21110:	e0bffa17 	ldw	r2,-24(fp)
   21114:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21118:	e0bff917 	ldw	r2,-28(fp)
   2111c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   21120:	e0fff517 	ldw	r3,-44(fp)
   21124:	e0bffd17 	ldw	r2,-12(fp)
   21128:	18800426 	beq	r3,r2,2113c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   2112c:	e0fff517 	ldw	r3,-44(fp)
   21130:	e0bffd17 	ldw	r2,-12(fp)
   21134:	1885c83a 	sub	r2,r3,r2
   21138:	00000606 	br	21154 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   2113c:	e0bfff17 	ldw	r2,-4(fp)
   21140:	1090000c 	andi	r2,r2,16384
   21144:	10000226 	beq	r2,zero,21150 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   21148:	00bffd44 	movi	r2,-11
   2114c:	00000106 	br	21154 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   21150:	00bffec4 	movi	r2,-5
}
   21154:	e037883a 	mov	sp,fp
   21158:	dfc00117 	ldw	ra,4(sp)
   2115c:	df000017 	ldw	fp,0(sp)
   21160:	dec00204 	addi	sp,sp,8
   21164:	f800283a 	ret

00021168 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   21168:	defff304 	addi	sp,sp,-52
   2116c:	dfc00c15 	stw	ra,48(sp)
   21170:	df000b15 	stw	fp,44(sp)
   21174:	df000b04 	addi	fp,sp,44
   21178:	e13ffc15 	stw	r4,-16(fp)
   2117c:	e17ffd15 	stw	r5,-12(fp)
   21180:	e1bffe15 	stw	r6,-8(fp)
   21184:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   21188:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2118c:	e0bffd17 	ldw	r2,-12(fp)
   21190:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   21194:	00003706 	br	21274 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   21198:	e0bffc17 	ldw	r2,-16(fp)
   2119c:	10800c17 	ldw	r2,48(r2)
   211a0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   211a4:	e0bffc17 	ldw	r2,-16(fp)
   211a8:	10800d17 	ldw	r2,52(r2)
   211ac:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   211b0:	e0fff917 	ldw	r3,-28(fp)
   211b4:	e0bff517 	ldw	r2,-44(fp)
   211b8:	1880062e 	bgeu	r3,r2,211d4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   211bc:	e0fff517 	ldw	r3,-44(fp)
   211c0:	e0bff917 	ldw	r2,-28(fp)
   211c4:	1885c83a 	sub	r2,r3,r2
   211c8:	10bfffc4 	addi	r2,r2,-1
   211cc:	e0bff615 	stw	r2,-40(fp)
   211d0:	00000b06 	br	21200 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   211d4:	e0bff517 	ldw	r2,-44(fp)
   211d8:	10000526 	beq	r2,zero,211f0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   211dc:	00c20004 	movi	r3,2048
   211e0:	e0bff917 	ldw	r2,-28(fp)
   211e4:	1885c83a 	sub	r2,r3,r2
   211e8:	e0bff615 	stw	r2,-40(fp)
   211ec:	00000406 	br	21200 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   211f0:	00c1ffc4 	movi	r3,2047
   211f4:	e0bff917 	ldw	r2,-28(fp)
   211f8:	1885c83a 	sub	r2,r3,r2
   211fc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   21200:	e0bff617 	ldw	r2,-40(fp)
   21204:	10001e26 	beq	r2,zero,21280 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   21208:	e0fffe17 	ldw	r3,-8(fp)
   2120c:	e0bff617 	ldw	r2,-40(fp)
   21210:	1880022e 	bgeu	r3,r2,2121c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   21214:	e0bffe17 	ldw	r2,-8(fp)
   21218:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2121c:	e0bffc17 	ldw	r2,-16(fp)
   21220:	10c20e04 	addi	r3,r2,2104
   21224:	e0bff917 	ldw	r2,-28(fp)
   21228:	1885883a 	add	r2,r3,r2
   2122c:	e1bff617 	ldw	r6,-40(fp)
   21230:	e17ffd17 	ldw	r5,-12(fp)
   21234:	1009883a 	mov	r4,r2
   21238:	0022cc40 	call	22cc4 <memcpy>
      ptr   += n;
   2123c:	e0fffd17 	ldw	r3,-12(fp)
   21240:	e0bff617 	ldw	r2,-40(fp)
   21244:	1885883a 	add	r2,r3,r2
   21248:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2124c:	e0fffe17 	ldw	r3,-8(fp)
   21250:	e0bff617 	ldw	r2,-40(fp)
   21254:	1885c83a 	sub	r2,r3,r2
   21258:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2125c:	e0fff917 	ldw	r3,-28(fp)
   21260:	e0bff617 	ldw	r2,-40(fp)
   21264:	1885883a 	add	r2,r3,r2
   21268:	10c1ffcc 	andi	r3,r2,2047
   2126c:	e0bffc17 	ldw	r2,-16(fp)
   21270:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   21274:	e0bffe17 	ldw	r2,-8(fp)
   21278:	00bfc716 	blt	zero,r2,21198 <__alt_data_end+0xfffed918>
   2127c:	00000106 	br	21284 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   21280:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21284:	0005303a 	rdctl	r2,status
   21288:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2128c:	e0fffb17 	ldw	r3,-20(fp)
   21290:	00bfff84 	movi	r2,-2
   21294:	1884703a 	and	r2,r3,r2
   21298:	1001703a 	wrctl	status,r2
  
  return context;
   2129c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   212a0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   212a4:	e0bffc17 	ldw	r2,-16(fp)
   212a8:	10800817 	ldw	r2,32(r2)
   212ac:	10c00094 	ori	r3,r2,2
   212b0:	e0bffc17 	ldw	r2,-16(fp)
   212b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   212b8:	e0bffc17 	ldw	r2,-16(fp)
   212bc:	10800017 	ldw	r2,0(r2)
   212c0:	10800104 	addi	r2,r2,4
   212c4:	1007883a 	mov	r3,r2
   212c8:	e0bffc17 	ldw	r2,-16(fp)
   212cc:	10800817 	ldw	r2,32(r2)
   212d0:	18800035 	stwio	r2,0(r3)
   212d4:	e0bffa17 	ldw	r2,-24(fp)
   212d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   212dc:	e0bff817 	ldw	r2,-32(fp)
   212e0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   212e4:	e0bffe17 	ldw	r2,-8(fp)
   212e8:	0080100e 	bge	zero,r2,2132c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   212ec:	e0bfff17 	ldw	r2,-4(fp)
   212f0:	1090000c 	andi	r2,r2,16384
   212f4:	1000101e 	bne	r2,zero,21338 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   212f8:	0001883a 	nop
   212fc:	e0bffc17 	ldw	r2,-16(fp)
   21300:	10c00d17 	ldw	r3,52(r2)
   21304:	e0bff517 	ldw	r2,-44(fp)
   21308:	1880051e 	bne	r3,r2,21320 <altera_avalon_jtag_uart_write+0x1b8>
   2130c:	e0bffc17 	ldw	r2,-16(fp)
   21310:	10c00917 	ldw	r3,36(r2)
   21314:	e0bffc17 	ldw	r2,-16(fp)
   21318:	10800117 	ldw	r2,4(r2)
   2131c:	18bff736 	bltu	r3,r2,212fc <__alt_data_end+0xfffeda7c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   21320:	e0bffc17 	ldw	r2,-16(fp)
   21324:	10800917 	ldw	r2,36(r2)
   21328:	1000051e 	bne	r2,zero,21340 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   2132c:	e0bffe17 	ldw	r2,-8(fp)
   21330:	00bfd016 	blt	zero,r2,21274 <__alt_data_end+0xfffed9f4>
   21334:	00000306 	br	21344 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   21338:	0001883a 	nop
   2133c:	00000106 	br	21344 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   21340:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   21344:	e0fffd17 	ldw	r3,-12(fp)
   21348:	e0bff717 	ldw	r2,-36(fp)
   2134c:	18800426 	beq	r3,r2,21360 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   21350:	e0fffd17 	ldw	r3,-12(fp)
   21354:	e0bff717 	ldw	r2,-36(fp)
   21358:	1885c83a 	sub	r2,r3,r2
   2135c:	00000606 	br	21378 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   21360:	e0bfff17 	ldw	r2,-4(fp)
   21364:	1090000c 	andi	r2,r2,16384
   21368:	10000226 	beq	r2,zero,21374 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   2136c:	00bffd44 	movi	r2,-11
   21370:	00000106 	br	21378 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   21374:	00bffec4 	movi	r2,-5
}
   21378:	e037883a 	mov	sp,fp
   2137c:	dfc00117 	ldw	ra,4(sp)
   21380:	df000017 	ldw	fp,0(sp)
   21384:	dec00204 	addi	sp,sp,8
   21388:	f800283a 	ret

0002138c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2138c:	defffa04 	addi	sp,sp,-24
   21390:	dfc00515 	stw	ra,20(sp)
   21394:	df000415 	stw	fp,16(sp)
   21398:	df000404 	addi	fp,sp,16
   2139c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   213a0:	0007883a 	mov	r3,zero
   213a4:	e0bfff17 	ldw	r2,-4(fp)
   213a8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   213ac:	e0bfff17 	ldw	r2,-4(fp)
   213b0:	10800104 	addi	r2,r2,4
   213b4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   213b8:	0005303a 	rdctl	r2,status
   213bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   213c0:	e0fffd17 	ldw	r3,-12(fp)
   213c4:	00bfff84 	movi	r2,-2
   213c8:	1884703a 	and	r2,r3,r2
   213cc:	1001703a 	wrctl	status,r2
  
  return context;
   213d0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   213d4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   213d8:	002070c0 	call	2070c <alt_tick>
   213dc:	e0bffc17 	ldw	r2,-16(fp)
   213e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   213e4:	e0bffe17 	ldw	r2,-8(fp)
   213e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   213ec:	0001883a 	nop
   213f0:	e037883a 	mov	sp,fp
   213f4:	dfc00117 	ldw	ra,4(sp)
   213f8:	df000017 	ldw	fp,0(sp)
   213fc:	dec00204 	addi	sp,sp,8
   21400:	f800283a 	ret

00021404 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   21404:	defff804 	addi	sp,sp,-32
   21408:	dfc00715 	stw	ra,28(sp)
   2140c:	df000615 	stw	fp,24(sp)
   21410:	df000604 	addi	fp,sp,24
   21414:	e13ffc15 	stw	r4,-16(fp)
   21418:	e17ffd15 	stw	r5,-12(fp)
   2141c:	e1bffe15 	stw	r6,-8(fp)
   21420:	e1ffff15 	stw	r7,-4(fp)
   21424:	e0bfff17 	ldw	r2,-4(fp)
   21428:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2142c:	d0a60617 	ldw	r2,-26600(gp)
   21430:	1000021e 	bne	r2,zero,2143c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   21434:	e0bffb17 	ldw	r2,-20(fp)
   21438:	d0a60615 	stw	r2,-26600(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2143c:	e0bffc17 	ldw	r2,-16(fp)
   21440:	10800104 	addi	r2,r2,4
   21444:	00c001c4 	movi	r3,7
   21448:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2144c:	d8000015 	stw	zero,0(sp)
   21450:	e1fffc17 	ldw	r7,-16(fp)
   21454:	018000b4 	movhi	r6,2
   21458:	3184e304 	addi	r6,r6,5004
   2145c:	e17ffe17 	ldw	r5,-8(fp)
   21460:	e13ffd17 	ldw	r4,-12(fp)
   21464:	00221d80 	call	221d8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   21468:	0001883a 	nop
   2146c:	e037883a 	mov	sp,fp
   21470:	dfc00117 	ldw	ra,4(sp)
   21474:	df000017 	ldw	fp,0(sp)
   21478:	dec00204 	addi	sp,sp,8
   2147c:	f800283a 	ret

00021480 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   21480:	defffa04 	addi	sp,sp,-24
   21484:	dfc00515 	stw	ra,20(sp)
   21488:	df000415 	stw	fp,16(sp)
   2148c:	df000404 	addi	fp,sp,16
   21490:	e13ffd15 	stw	r4,-12(fp)
   21494:	e17ffe15 	stw	r5,-8(fp)
   21498:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2149c:	e0bffd17 	ldw	r2,-12(fp)
   214a0:	10800017 	ldw	r2,0(r2)
   214a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   214a8:	e0bffc17 	ldw	r2,-16(fp)
   214ac:	10c00a04 	addi	r3,r2,40
   214b0:	e0bffd17 	ldw	r2,-12(fp)
   214b4:	10800217 	ldw	r2,8(r2)
   214b8:	100f883a 	mov	r7,r2
   214bc:	e1bfff17 	ldw	r6,-4(fp)
   214c0:	e17ffe17 	ldw	r5,-8(fp)
   214c4:	1809883a 	mov	r4,r3
   214c8:	00219940 	call	21994 <altera_avalon_uart_read>
      fd->fd_flags);
}
   214cc:	e037883a 	mov	sp,fp
   214d0:	dfc00117 	ldw	ra,4(sp)
   214d4:	df000017 	ldw	fp,0(sp)
   214d8:	dec00204 	addi	sp,sp,8
   214dc:	f800283a 	ret

000214e0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   214e0:	defffa04 	addi	sp,sp,-24
   214e4:	dfc00515 	stw	ra,20(sp)
   214e8:	df000415 	stw	fp,16(sp)
   214ec:	df000404 	addi	fp,sp,16
   214f0:	e13ffd15 	stw	r4,-12(fp)
   214f4:	e17ffe15 	stw	r5,-8(fp)
   214f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   214fc:	e0bffd17 	ldw	r2,-12(fp)
   21500:	10800017 	ldw	r2,0(r2)
   21504:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   21508:	e0bffc17 	ldw	r2,-16(fp)
   2150c:	10c00a04 	addi	r3,r2,40
   21510:	e0bffd17 	ldw	r2,-12(fp)
   21514:	10800217 	ldw	r2,8(r2)
   21518:	100f883a 	mov	r7,r2
   2151c:	e1bfff17 	ldw	r6,-4(fp)
   21520:	e17ffe17 	ldw	r5,-8(fp)
   21524:	1809883a 	mov	r4,r3
   21528:	0021bac0 	call	21bac <altera_avalon_uart_write>
      fd->fd_flags);
}
   2152c:	e037883a 	mov	sp,fp
   21530:	dfc00117 	ldw	ra,4(sp)
   21534:	df000017 	ldw	fp,0(sp)
   21538:	dec00204 	addi	sp,sp,8
   2153c:	f800283a 	ret

00021540 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   21540:	defffc04 	addi	sp,sp,-16
   21544:	dfc00315 	stw	ra,12(sp)
   21548:	df000215 	stw	fp,8(sp)
   2154c:	df000204 	addi	fp,sp,8
   21550:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   21554:	e0bfff17 	ldw	r2,-4(fp)
   21558:	10800017 	ldw	r2,0(r2)
   2155c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   21560:	e0bffe17 	ldw	r2,-8(fp)
   21564:	10c00a04 	addi	r3,r2,40
   21568:	e0bfff17 	ldw	r2,-4(fp)
   2156c:	10800217 	ldw	r2,8(r2)
   21570:	100b883a 	mov	r5,r2
   21574:	1809883a 	mov	r4,r3
   21578:	00219040 	call	21904 <altera_avalon_uart_close>
}
   2157c:	e037883a 	mov	sp,fp
   21580:	dfc00117 	ldw	ra,4(sp)
   21584:	df000017 	ldw	fp,0(sp)
   21588:	dec00204 	addi	sp,sp,8
   2158c:	f800283a 	ret

00021590 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   21590:	defff804 	addi	sp,sp,-32
   21594:	dfc00715 	stw	ra,28(sp)
   21598:	df000615 	stw	fp,24(sp)
   2159c:	df000604 	addi	fp,sp,24
   215a0:	e13ffd15 	stw	r4,-12(fp)
   215a4:	e17ffe15 	stw	r5,-8(fp)
   215a8:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   215ac:	e0bffd17 	ldw	r2,-12(fp)
   215b0:	10800017 	ldw	r2,0(r2)
   215b4:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   215b8:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   215bc:	1000041e 	bne	r2,zero,215d0 <altera_avalon_uart_init+0x40>
   215c0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   215c4:	1000021e 	bne	r2,zero,215d0 <altera_avalon_uart_init+0x40>
   215c8:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   215cc:	10000226 	beq	r2,zero,215d8 <altera_avalon_uart_init+0x48>
   215d0:	00800044 	movi	r2,1
   215d4:	00000106 	br	215dc <altera_avalon_uart_init+0x4c>
   215d8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   215dc:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   215e0:	e0bffc17 	ldw	r2,-16(fp)
   215e4:	10000f1e 	bne	r2,zero,21624 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   215e8:	e0bffd17 	ldw	r2,-12(fp)
   215ec:	00c32004 	movi	r3,3200
   215f0:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   215f4:	e0bffb17 	ldw	r2,-20(fp)
   215f8:	10800304 	addi	r2,r2,12
   215fc:	e0fffd17 	ldw	r3,-12(fp)
   21600:	18c00117 	ldw	r3,4(r3)
   21604:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   21608:	d8000015 	stw	zero,0(sp)
   2160c:	e1fffd17 	ldw	r7,-12(fp)
   21610:	018000b4 	movhi	r6,2
   21614:	31858f04 	addi	r6,r6,5692
   21618:	e17fff17 	ldw	r5,-4(fp)
   2161c:	e13ffe17 	ldw	r4,-8(fp)
   21620:	00221d80 	call	221d8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   21624:	0001883a 	nop
   21628:	e037883a 	mov	sp,fp
   2162c:	dfc00117 	ldw	ra,4(sp)
   21630:	df000017 	ldw	fp,0(sp)
   21634:	dec00204 	addi	sp,sp,8
   21638:	f800283a 	ret

0002163c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   2163c:	defffa04 	addi	sp,sp,-24
   21640:	dfc00515 	stw	ra,20(sp)
   21644:	df000415 	stw	fp,16(sp)
   21648:	df000404 	addi	fp,sp,16
   2164c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   21650:	e0bfff17 	ldw	r2,-4(fp)
   21654:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   21658:	e0bffc17 	ldw	r2,-16(fp)
   2165c:	10800017 	ldw	r2,0(r2)
   21660:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   21664:	e0bffd17 	ldw	r2,-12(fp)
   21668:	10800204 	addi	r2,r2,8
   2166c:	10800037 	ldwio	r2,0(r2)
   21670:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   21674:	e0bffd17 	ldw	r2,-12(fp)
   21678:	10800204 	addi	r2,r2,8
   2167c:	0007883a 	mov	r3,zero
   21680:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   21684:	e0bffd17 	ldw	r2,-12(fp)
   21688:	10800204 	addi	r2,r2,8
   2168c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   21690:	e0bffe17 	ldw	r2,-8(fp)
   21694:	1080200c 	andi	r2,r2,128
   21698:	10000326 	beq	r2,zero,216a8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   2169c:	e17ffe17 	ldw	r5,-8(fp)
   216a0:	e13ffc17 	ldw	r4,-16(fp)
   216a4:	00216d80 	call	216d8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   216a8:	e0bffe17 	ldw	r2,-8(fp)
   216ac:	1081100c 	andi	r2,r2,1088
   216b0:	10000326 	beq	r2,zero,216c0 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   216b4:	e17ffe17 	ldw	r5,-8(fp)
   216b8:	e13ffc17 	ldw	r4,-16(fp)
   216bc:	00217bc0 	call	217bc <altera_avalon_uart_txirq>
  }
  

}
   216c0:	0001883a 	nop
   216c4:	e037883a 	mov	sp,fp
   216c8:	dfc00117 	ldw	ra,4(sp)
   216cc:	df000017 	ldw	fp,0(sp)
   216d0:	dec00204 	addi	sp,sp,8
   216d4:	f800283a 	ret

000216d8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   216d8:	defffc04 	addi	sp,sp,-16
   216dc:	df000315 	stw	fp,12(sp)
   216e0:	df000304 	addi	fp,sp,12
   216e4:	e13ffe15 	stw	r4,-8(fp)
   216e8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   216ec:	e0bfff17 	ldw	r2,-4(fp)
   216f0:	108000cc 	andi	r2,r2,3
   216f4:	10002c1e 	bne	r2,zero,217a8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   216f8:	e0bffe17 	ldw	r2,-8(fp)
   216fc:	10800317 	ldw	r2,12(r2)
   21700:	e0bffe17 	ldw	r2,-8(fp)
   21704:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   21708:	e0bffe17 	ldw	r2,-8(fp)
   2170c:	10800317 	ldw	r2,12(r2)
   21710:	10800044 	addi	r2,r2,1
   21714:	10800fcc 	andi	r2,r2,63
   21718:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   2171c:	e0bffe17 	ldw	r2,-8(fp)
   21720:	10800317 	ldw	r2,12(r2)
   21724:	e0fffe17 	ldw	r3,-8(fp)
   21728:	18c00017 	ldw	r3,0(r3)
   2172c:	18c00037 	ldwio	r3,0(r3)
   21730:	1809883a 	mov	r4,r3
   21734:	e0fffe17 	ldw	r3,-8(fp)
   21738:	1885883a 	add	r2,r3,r2
   2173c:	10800704 	addi	r2,r2,28
   21740:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   21744:	e0bffe17 	ldw	r2,-8(fp)
   21748:	e0fffd17 	ldw	r3,-12(fp)
   2174c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   21750:	e0bffe17 	ldw	r2,-8(fp)
   21754:	10800317 	ldw	r2,12(r2)
   21758:	10800044 	addi	r2,r2,1
   2175c:	10800fcc 	andi	r2,r2,63
   21760:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   21764:	e0bffe17 	ldw	r2,-8(fp)
   21768:	10c00217 	ldw	r3,8(r2)
   2176c:	e0bffd17 	ldw	r2,-12(fp)
   21770:	18800e1e 	bne	r3,r2,217ac <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   21774:	e0bffe17 	ldw	r2,-8(fp)
   21778:	10c00117 	ldw	r3,4(r2)
   2177c:	00bfdfc4 	movi	r2,-129
   21780:	1886703a 	and	r3,r3,r2
   21784:	e0bffe17 	ldw	r2,-8(fp)
   21788:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   2178c:	e0bffe17 	ldw	r2,-8(fp)
   21790:	10800017 	ldw	r2,0(r2)
   21794:	10800304 	addi	r2,r2,12
   21798:	e0fffe17 	ldw	r3,-8(fp)
   2179c:	18c00117 	ldw	r3,4(r3)
   217a0:	10c00035 	stwio	r3,0(r2)
   217a4:	00000106 	br	217ac <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   217a8:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   217ac:	e037883a 	mov	sp,fp
   217b0:	df000017 	ldw	fp,0(sp)
   217b4:	dec00104 	addi	sp,sp,4
   217b8:	f800283a 	ret

000217bc <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   217bc:	defffb04 	addi	sp,sp,-20
   217c0:	df000415 	stw	fp,16(sp)
   217c4:	df000404 	addi	fp,sp,16
   217c8:	e13ffc15 	stw	r4,-16(fp)
   217cc:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   217d0:	e0bffc17 	ldw	r2,-16(fp)
   217d4:	10c00417 	ldw	r3,16(r2)
   217d8:	e0bffc17 	ldw	r2,-16(fp)
   217dc:	10800517 	ldw	r2,20(r2)
   217e0:	18803226 	beq	r3,r2,218ac <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   217e4:	e0bffc17 	ldw	r2,-16(fp)
   217e8:	10800617 	ldw	r2,24(r2)
   217ec:	1080008c 	andi	r2,r2,2
   217f0:	10000326 	beq	r2,zero,21800 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   217f4:	e0bffd17 	ldw	r2,-12(fp)
   217f8:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   217fc:	10001d26 	beq	r2,zero,21874 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   21800:	e0bffc17 	ldw	r2,-16(fp)
   21804:	10800417 	ldw	r2,16(r2)
   21808:	e0bffc17 	ldw	r2,-16(fp)
   2180c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   21810:	e0bffc17 	ldw	r2,-16(fp)
   21814:	10800017 	ldw	r2,0(r2)
   21818:	10800104 	addi	r2,r2,4
   2181c:	e0fffc17 	ldw	r3,-16(fp)
   21820:	18c00417 	ldw	r3,16(r3)
   21824:	e13ffc17 	ldw	r4,-16(fp)
   21828:	20c7883a 	add	r3,r4,r3
   2182c:	18c01704 	addi	r3,r3,92
   21830:	18c00003 	ldbu	r3,0(r3)
   21834:	18c03fcc 	andi	r3,r3,255
   21838:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   2183c:	e0bffc17 	ldw	r2,-16(fp)
   21840:	10800417 	ldw	r2,16(r2)
   21844:	10800044 	addi	r2,r2,1
   21848:	e0fffc17 	ldw	r3,-16(fp)
   2184c:	18800415 	stw	r2,16(r3)
   21850:	10c00fcc 	andi	r3,r2,63
   21854:	e0bffc17 	ldw	r2,-16(fp)
   21858:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   2185c:	e0bffc17 	ldw	r2,-16(fp)
   21860:	10800117 	ldw	r2,4(r2)
   21864:	10c01014 	ori	r3,r2,64
   21868:	e0bffc17 	ldw	r2,-16(fp)
   2186c:	10c00115 	stw	r3,4(r2)
   21870:	00000e06 	br	218ac <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   21874:	e0bffc17 	ldw	r2,-16(fp)
   21878:	10800017 	ldw	r2,0(r2)
   2187c:	10800204 	addi	r2,r2,8
   21880:	10800037 	ldwio	r2,0(r2)
   21884:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   21888:	e0bffd17 	ldw	r2,-12(fp)
   2188c:	1082000c 	andi	r2,r2,2048
   21890:	1000061e 	bne	r2,zero,218ac <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   21894:	e0bffc17 	ldw	r2,-16(fp)
   21898:	10c00117 	ldw	r3,4(r2)
   2189c:	00bfefc4 	movi	r2,-65
   218a0:	1886703a 	and	r3,r3,r2
   218a4:	e0bffc17 	ldw	r2,-16(fp)
   218a8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   218ac:	e0bffc17 	ldw	r2,-16(fp)
   218b0:	10c00417 	ldw	r3,16(r2)
   218b4:	e0bffc17 	ldw	r2,-16(fp)
   218b8:	10800517 	ldw	r2,20(r2)
   218bc:	1880061e 	bne	r3,r2,218d8 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   218c0:	e0bffc17 	ldw	r2,-16(fp)
   218c4:	10c00117 	ldw	r3,4(r2)
   218c8:	00beefc4 	movi	r2,-1089
   218cc:	1886703a 	and	r3,r3,r2
   218d0:	e0bffc17 	ldw	r2,-16(fp)
   218d4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   218d8:	e0bffc17 	ldw	r2,-16(fp)
   218dc:	10800017 	ldw	r2,0(r2)
   218e0:	10800304 	addi	r2,r2,12
   218e4:	e0fffc17 	ldw	r3,-16(fp)
   218e8:	18c00117 	ldw	r3,4(r3)
   218ec:	10c00035 	stwio	r3,0(r2)
}
   218f0:	0001883a 	nop
   218f4:	e037883a 	mov	sp,fp
   218f8:	df000017 	ldw	fp,0(sp)
   218fc:	dec00104 	addi	sp,sp,4
   21900:	f800283a 	ret

00021904 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   21904:	defffd04 	addi	sp,sp,-12
   21908:	df000215 	stw	fp,8(sp)
   2190c:	df000204 	addi	fp,sp,8
   21910:	e13ffe15 	stw	r4,-8(fp)
   21914:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   21918:	00000506 	br	21930 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2191c:	e0bfff17 	ldw	r2,-4(fp)
   21920:	1090000c 	andi	r2,r2,16384
   21924:	10000226 	beq	r2,zero,21930 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   21928:	00bffd44 	movi	r2,-11
   2192c:	00000606 	br	21948 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   21930:	e0bffe17 	ldw	r2,-8(fp)
   21934:	10c00417 	ldw	r3,16(r2)
   21938:	e0bffe17 	ldw	r2,-8(fp)
   2193c:	10800517 	ldw	r2,20(r2)
   21940:	18bff61e 	bne	r3,r2,2191c <__alt_data_end+0xfffee09c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   21944:	0005883a 	mov	r2,zero
}
   21948:	e037883a 	mov	sp,fp
   2194c:	df000017 	ldw	fp,0(sp)
   21950:	dec00104 	addi	sp,sp,4
   21954:	f800283a 	ret

00021958 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21958:	defffe04 	addi	sp,sp,-8
   2195c:	dfc00115 	stw	ra,4(sp)
   21960:	df000015 	stw	fp,0(sp)
   21964:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21968:	d0a00717 	ldw	r2,-32740(gp)
   2196c:	10000326 	beq	r2,zero,2197c <alt_get_errno+0x24>
   21970:	d0a00717 	ldw	r2,-32740(gp)
   21974:	103ee83a 	callr	r2
   21978:	00000106 	br	21980 <alt_get_errno+0x28>
   2197c:	d0a60a04 	addi	r2,gp,-26584
}
   21980:	e037883a 	mov	sp,fp
   21984:	dfc00117 	ldw	ra,4(sp)
   21988:	df000017 	ldw	fp,0(sp)
   2198c:	dec00204 	addi	sp,sp,8
   21990:	f800283a 	ret

00021994 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   21994:	defff204 	addi	sp,sp,-56
   21998:	dfc00d15 	stw	ra,52(sp)
   2199c:	df000c15 	stw	fp,48(sp)
   219a0:	df000c04 	addi	fp,sp,48
   219a4:	e13ffc15 	stw	r4,-16(fp)
   219a8:	e17ffd15 	stw	r5,-12(fp)
   219ac:	e1bffe15 	stw	r6,-8(fp)
   219b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   219b4:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   219b8:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   219bc:	e0bfff17 	ldw	r2,-4(fp)
   219c0:	1090000c 	andi	r2,r2,16384
   219c4:	1005003a 	cmpeq	r2,r2,zero
   219c8:	10803fcc 	andi	r2,r2,255
   219cc:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   219d0:	00001306 	br	21a20 <altera_avalon_uart_read+0x8c>
    {
      count++;
   219d4:	e0bff517 	ldw	r2,-44(fp)
   219d8:	10800044 	addi	r2,r2,1
   219dc:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   219e0:	e0bffd17 	ldw	r2,-12(fp)
   219e4:	10c00044 	addi	r3,r2,1
   219e8:	e0fffd15 	stw	r3,-12(fp)
   219ec:	e0fffc17 	ldw	r3,-16(fp)
   219f0:	18c00217 	ldw	r3,8(r3)
   219f4:	e13ffc17 	ldw	r4,-16(fp)
   219f8:	20c7883a 	add	r3,r4,r3
   219fc:	18c00704 	addi	r3,r3,28
   21a00:	18c00003 	ldbu	r3,0(r3)
   21a04:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   21a08:	e0bffc17 	ldw	r2,-16(fp)
   21a0c:	10800217 	ldw	r2,8(r2)
   21a10:	10800044 	addi	r2,r2,1
   21a14:	10c00fcc 	andi	r3,r2,63
   21a18:	e0bffc17 	ldw	r2,-16(fp)
   21a1c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   21a20:	e0fff517 	ldw	r3,-44(fp)
   21a24:	e0bffe17 	ldw	r2,-8(fp)
   21a28:	1880050e 	bge	r3,r2,21a40 <altera_avalon_uart_read+0xac>
   21a2c:	e0bffc17 	ldw	r2,-16(fp)
   21a30:	10c00217 	ldw	r3,8(r2)
   21a34:	e0bffc17 	ldw	r2,-16(fp)
   21a38:	10800317 	ldw	r2,12(r2)
   21a3c:	18bfe51e 	bne	r3,r2,219d4 <__alt_data_end+0xfffee154>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   21a40:	e0bff517 	ldw	r2,-44(fp)
   21a44:	1000251e 	bne	r2,zero,21adc <altera_avalon_uart_read+0x148>
   21a48:	e0bffc17 	ldw	r2,-16(fp)
   21a4c:	10c00217 	ldw	r3,8(r2)
   21a50:	e0bffc17 	ldw	r2,-16(fp)
   21a54:	10800317 	ldw	r2,12(r2)
   21a58:	1880201e 	bne	r3,r2,21adc <altera_avalon_uart_read+0x148>
    {
      if (!block)
   21a5c:	e0bff617 	ldw	r2,-40(fp)
   21a60:	1000071e 	bne	r2,zero,21a80 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   21a64:	00219580 	call	21958 <alt_get_errno>
   21a68:	1007883a 	mov	r3,r2
   21a6c:	008002c4 	movi	r2,11
   21a70:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   21a74:	00800044 	movi	r2,1
   21a78:	e0bff405 	stb	r2,-48(fp)
        break;
   21a7c:	00001b06 	br	21aec <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21a80:	0005303a 	rdctl	r2,status
   21a84:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21a88:	e0fff917 	ldw	r3,-28(fp)
   21a8c:	00bfff84 	movi	r2,-2
   21a90:	1884703a 	and	r2,r3,r2
   21a94:	1001703a 	wrctl	status,r2
  
  return context;
   21a98:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   21a9c:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   21aa0:	e0bffc17 	ldw	r2,-16(fp)
   21aa4:	10800117 	ldw	r2,4(r2)
   21aa8:	10c02014 	ori	r3,r2,128
   21aac:	e0bffc17 	ldw	r2,-16(fp)
   21ab0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   21ab4:	e0bffc17 	ldw	r2,-16(fp)
   21ab8:	10800017 	ldw	r2,0(r2)
   21abc:	10800304 	addi	r2,r2,12
   21ac0:	e0fffc17 	ldw	r3,-16(fp)
   21ac4:	18c00117 	ldw	r3,4(r3)
   21ac8:	10c00035 	stwio	r3,0(r2)
   21acc:	e0bff817 	ldw	r2,-32(fp)
   21ad0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21ad4:	e0bffa17 	ldw	r2,-24(fp)
   21ad8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   21adc:	e0bff517 	ldw	r2,-44(fp)
   21ae0:	1000021e 	bne	r2,zero,21aec <altera_avalon_uart_read+0x158>
   21ae4:	e0bffe17 	ldw	r2,-8(fp)
   21ae8:	103fcd1e 	bne	r2,zero,21a20 <__alt_data_end+0xfffee1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21aec:	0005303a 	rdctl	r2,status
   21af0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21af4:	e0fffb17 	ldw	r3,-20(fp)
   21af8:	00bfff84 	movi	r2,-2
   21afc:	1884703a 	and	r2,r3,r2
   21b00:	1001703a 	wrctl	status,r2
  
  return context;
   21b04:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   21b08:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   21b0c:	e0bffc17 	ldw	r2,-16(fp)
   21b10:	10800117 	ldw	r2,4(r2)
   21b14:	10c02014 	ori	r3,r2,128
   21b18:	e0bffc17 	ldw	r2,-16(fp)
   21b1c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   21b20:	e0bffc17 	ldw	r2,-16(fp)
   21b24:	10800017 	ldw	r2,0(r2)
   21b28:	10800304 	addi	r2,r2,12
   21b2c:	e0fffc17 	ldw	r3,-16(fp)
   21b30:	18c00117 	ldw	r3,4(r3)
   21b34:	10c00035 	stwio	r3,0(r2)
   21b38:	e0bff817 	ldw	r2,-32(fp)
   21b3c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21b40:	e0bff717 	ldw	r2,-36(fp)
   21b44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   21b48:	e0bff403 	ldbu	r2,-48(fp)
   21b4c:	10000226 	beq	r2,zero,21b58 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   21b50:	00bffd44 	movi	r2,-11
   21b54:	00000106 	br	21b5c <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   21b58:	e0bff517 	ldw	r2,-44(fp)
  }
}
   21b5c:	e037883a 	mov	sp,fp
   21b60:	dfc00117 	ldw	ra,4(sp)
   21b64:	df000017 	ldw	fp,0(sp)
   21b68:	dec00204 	addi	sp,sp,8
   21b6c:	f800283a 	ret

00021b70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21b70:	defffe04 	addi	sp,sp,-8
   21b74:	dfc00115 	stw	ra,4(sp)
   21b78:	df000015 	stw	fp,0(sp)
   21b7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21b80:	d0a00717 	ldw	r2,-32740(gp)
   21b84:	10000326 	beq	r2,zero,21b94 <alt_get_errno+0x24>
   21b88:	d0a00717 	ldw	r2,-32740(gp)
   21b8c:	103ee83a 	callr	r2
   21b90:	00000106 	br	21b98 <alt_get_errno+0x28>
   21b94:	d0a60a04 	addi	r2,gp,-26584
}
   21b98:	e037883a 	mov	sp,fp
   21b9c:	dfc00117 	ldw	ra,4(sp)
   21ba0:	df000017 	ldw	fp,0(sp)
   21ba4:	dec00204 	addi	sp,sp,8
   21ba8:	f800283a 	ret

00021bac <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   21bac:	defff204 	addi	sp,sp,-56
   21bb0:	dfc00d15 	stw	ra,52(sp)
   21bb4:	df000c15 	stw	fp,48(sp)
   21bb8:	df000c04 	addi	fp,sp,48
   21bbc:	e13ffc15 	stw	r4,-16(fp)
   21bc0:	e17ffd15 	stw	r5,-12(fp)
   21bc4:	e1bffe15 	stw	r6,-8(fp)
   21bc8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   21bcc:	e0bffe17 	ldw	r2,-8(fp)
   21bd0:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   21bd4:	e0bfff17 	ldw	r2,-4(fp)
   21bd8:	1090000c 	andi	r2,r2,16384
   21bdc:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   21be0:	00003c06 	br	21cd4 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   21be4:	e0bffc17 	ldw	r2,-16(fp)
   21be8:	10800517 	ldw	r2,20(r2)
   21bec:	10800044 	addi	r2,r2,1
   21bf0:	10800fcc 	andi	r2,r2,63
   21bf4:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   21bf8:	e0bffc17 	ldw	r2,-16(fp)
   21bfc:	10c00417 	ldw	r3,16(r2)
   21c00:	e0bff717 	ldw	r2,-36(fp)
   21c04:	1880221e 	bne	r3,r2,21c90 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   21c08:	e0bff517 	ldw	r2,-44(fp)
   21c0c:	10000526 	beq	r2,zero,21c24 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   21c10:	0021b700 	call	21b70 <alt_get_errno>
   21c14:	1007883a 	mov	r3,r2
   21c18:	008002c4 	movi	r2,11
   21c1c:	18800015 	stw	r2,0(r3)
        break;
   21c20:	00002e06 	br	21cdc <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21c24:	0005303a 	rdctl	r2,status
   21c28:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21c2c:	e0fff917 	ldw	r3,-28(fp)
   21c30:	00bfff84 	movi	r2,-2
   21c34:	1884703a 	and	r2,r3,r2
   21c38:	1001703a 	wrctl	status,r2
  
  return context;
   21c3c:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   21c40:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   21c44:	e0bffc17 	ldw	r2,-16(fp)
   21c48:	10800117 	ldw	r2,4(r2)
   21c4c:	10c11014 	ori	r3,r2,1088
   21c50:	e0bffc17 	ldw	r2,-16(fp)
   21c54:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   21c58:	e0bffc17 	ldw	r2,-16(fp)
   21c5c:	10800017 	ldw	r2,0(r2)
   21c60:	10800304 	addi	r2,r2,12
   21c64:	e0fffc17 	ldw	r3,-16(fp)
   21c68:	18c00117 	ldw	r3,4(r3)
   21c6c:	10c00035 	stwio	r3,0(r2)
   21c70:	e0bff817 	ldw	r2,-32(fp)
   21c74:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21c78:	e0bff617 	ldw	r2,-40(fp)
   21c7c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   21c80:	e0bffc17 	ldw	r2,-16(fp)
   21c84:	10c00417 	ldw	r3,16(r2)
   21c88:	e0bff717 	ldw	r2,-36(fp)
   21c8c:	18bffc26 	beq	r3,r2,21c80 <__alt_data_end+0xfffee400>
      }
    }

    count--;
   21c90:	e0bff417 	ldw	r2,-48(fp)
   21c94:	10bfffc4 	addi	r2,r2,-1
   21c98:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   21c9c:	e0bffc17 	ldw	r2,-16(fp)
   21ca0:	10c00517 	ldw	r3,20(r2)
   21ca4:	e0bffd17 	ldw	r2,-12(fp)
   21ca8:	11000044 	addi	r4,r2,1
   21cac:	e13ffd15 	stw	r4,-12(fp)
   21cb0:	10800003 	ldbu	r2,0(r2)
   21cb4:	1009883a 	mov	r4,r2
   21cb8:	e0bffc17 	ldw	r2,-16(fp)
   21cbc:	10c5883a 	add	r2,r2,r3
   21cc0:	10801704 	addi	r2,r2,92
   21cc4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   21cc8:	e0bffc17 	ldw	r2,-16(fp)
   21ccc:	e0fff717 	ldw	r3,-36(fp)
   21cd0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   21cd4:	e0bff417 	ldw	r2,-48(fp)
   21cd8:	103fc21e 	bne	r2,zero,21be4 <__alt_data_end+0xfffee364>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21cdc:	0005303a 	rdctl	r2,status
   21ce0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21ce4:	e0fffb17 	ldw	r3,-20(fp)
   21ce8:	00bfff84 	movi	r2,-2
   21cec:	1884703a 	and	r2,r3,r2
   21cf0:	1001703a 	wrctl	status,r2
  
  return context;
   21cf4:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   21cf8:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   21cfc:	e0bffc17 	ldw	r2,-16(fp)
   21d00:	10800117 	ldw	r2,4(r2)
   21d04:	10c11014 	ori	r3,r2,1088
   21d08:	e0bffc17 	ldw	r2,-16(fp)
   21d0c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   21d10:	e0bffc17 	ldw	r2,-16(fp)
   21d14:	10800017 	ldw	r2,0(r2)
   21d18:	10800304 	addi	r2,r2,12
   21d1c:	e0fffc17 	ldw	r3,-16(fp)
   21d20:	18c00117 	ldw	r3,4(r3)
   21d24:	10c00035 	stwio	r3,0(r2)
   21d28:	e0bff817 	ldw	r2,-32(fp)
   21d2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21d30:	e0bffa17 	ldw	r2,-24(fp)
   21d34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   21d38:	e0fffe17 	ldw	r3,-8(fp)
   21d3c:	e0bff417 	ldw	r2,-48(fp)
   21d40:	1885c83a 	sub	r2,r3,r2
}
   21d44:	e037883a 	mov	sp,fp
   21d48:	dfc00117 	ldw	ra,4(sp)
   21d4c:	df000017 	ldw	fp,0(sp)
   21d50:	dec00204 	addi	sp,sp,8
   21d54:	f800283a 	ret

00021d58 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   21d58:	defff504 	addi	sp,sp,-44
   21d5c:	df000a15 	stw	fp,40(sp)
   21d60:	df000a04 	addi	fp,sp,40
   21d64:	e13ffc15 	stw	r4,-16(fp)
   21d68:	e17ffd15 	stw	r5,-12(fp)
   21d6c:	e1bffe15 	stw	r6,-8(fp)
   21d70:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   21d74:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   21d78:	d0a60617 	ldw	r2,-26600(gp)
  
  if (alt_ticks_per_second ())
   21d7c:	10003c26 	beq	r2,zero,21e70 <alt_alarm_start+0x118>
  {
    if (alarm)
   21d80:	e0bffc17 	ldw	r2,-16(fp)
   21d84:	10003826 	beq	r2,zero,21e68 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   21d88:	e0bffc17 	ldw	r2,-16(fp)
   21d8c:	e0fffe17 	ldw	r3,-8(fp)
   21d90:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   21d94:	e0bffc17 	ldw	r2,-16(fp)
   21d98:	e0ffff17 	ldw	r3,-4(fp)
   21d9c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21da0:	0005303a 	rdctl	r2,status
   21da4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21da8:	e0fff917 	ldw	r3,-28(fp)
   21dac:	00bfff84 	movi	r2,-2
   21db0:	1884703a 	and	r2,r3,r2
   21db4:	1001703a 	wrctl	status,r2
  
  return context;
   21db8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   21dbc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   21dc0:	d0a60717 	ldw	r2,-26596(gp)
      
      current_nticks = alt_nticks();
   21dc4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   21dc8:	e0fffd17 	ldw	r3,-12(fp)
   21dcc:	e0bff617 	ldw	r2,-40(fp)
   21dd0:	1885883a 	add	r2,r3,r2
   21dd4:	10c00044 	addi	r3,r2,1
   21dd8:	e0bffc17 	ldw	r2,-16(fp)
   21ddc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   21de0:	e0bffc17 	ldw	r2,-16(fp)
   21de4:	10c00217 	ldw	r3,8(r2)
   21de8:	e0bff617 	ldw	r2,-40(fp)
   21dec:	1880042e 	bgeu	r3,r2,21e00 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   21df0:	e0bffc17 	ldw	r2,-16(fp)
   21df4:	00c00044 	movi	r3,1
   21df8:	10c00405 	stb	r3,16(r2)
   21dfc:	00000206 	br	21e08 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   21e00:	e0bffc17 	ldw	r2,-16(fp)
   21e04:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   21e08:	e0bffc17 	ldw	r2,-16(fp)
   21e0c:	d0e00004 	addi	r3,gp,-32768
   21e10:	e0fffa15 	stw	r3,-24(fp)
   21e14:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   21e18:	e0bffb17 	ldw	r2,-20(fp)
   21e1c:	e0fffa17 	ldw	r3,-24(fp)
   21e20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   21e24:	e0bffa17 	ldw	r2,-24(fp)
   21e28:	10c00017 	ldw	r3,0(r2)
   21e2c:	e0bffb17 	ldw	r2,-20(fp)
   21e30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   21e34:	e0bffa17 	ldw	r2,-24(fp)
   21e38:	10800017 	ldw	r2,0(r2)
   21e3c:	e0fffb17 	ldw	r3,-20(fp)
   21e40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   21e44:	e0bffa17 	ldw	r2,-24(fp)
   21e48:	e0fffb17 	ldw	r3,-20(fp)
   21e4c:	10c00015 	stw	r3,0(r2)
   21e50:	e0bff817 	ldw	r2,-32(fp)
   21e54:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21e58:	e0bff717 	ldw	r2,-36(fp)
   21e5c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   21e60:	0005883a 	mov	r2,zero
   21e64:	00000306 	br	21e74 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   21e68:	00bffa84 	movi	r2,-22
   21e6c:	00000106 	br	21e74 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   21e70:	00bfde84 	movi	r2,-134
  }
}
   21e74:	e037883a 	mov	sp,fp
   21e78:	df000017 	ldw	fp,0(sp)
   21e7c:	dec00104 	addi	sp,sp,4
   21e80:	f800283a 	ret

00021e84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21e84:	defffe04 	addi	sp,sp,-8
   21e88:	dfc00115 	stw	ra,4(sp)
   21e8c:	df000015 	stw	fp,0(sp)
   21e90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21e94:	d0a00717 	ldw	r2,-32740(gp)
   21e98:	10000326 	beq	r2,zero,21ea8 <alt_get_errno+0x24>
   21e9c:	d0a00717 	ldw	r2,-32740(gp)
   21ea0:	103ee83a 	callr	r2
   21ea4:	00000106 	br	21eac <alt_get_errno+0x28>
   21ea8:	d0a60a04 	addi	r2,gp,-26584
}
   21eac:	e037883a 	mov	sp,fp
   21eb0:	dfc00117 	ldw	ra,4(sp)
   21eb4:	df000017 	ldw	fp,0(sp)
   21eb8:	dec00204 	addi	sp,sp,8
   21ebc:	f800283a 	ret

00021ec0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   21ec0:	defffb04 	addi	sp,sp,-20
   21ec4:	dfc00415 	stw	ra,16(sp)
   21ec8:	df000315 	stw	fp,12(sp)
   21ecc:	df000304 	addi	fp,sp,12
   21ed0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   21ed4:	e0bfff17 	ldw	r2,-4(fp)
   21ed8:	10000616 	blt	r2,zero,21ef4 <close+0x34>
   21edc:	e0bfff17 	ldw	r2,-4(fp)
   21ee0:	10c00324 	muli	r3,r2,12
   21ee4:	008000b4 	movhi	r2,2
   21ee8:	1090f604 	addi	r2,r2,17368
   21eec:	1885883a 	add	r2,r3,r2
   21ef0:	00000106 	br	21ef8 <close+0x38>
   21ef4:	0005883a 	mov	r2,zero
   21ef8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   21efc:	e0bffd17 	ldw	r2,-12(fp)
   21f00:	10001926 	beq	r2,zero,21f68 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   21f04:	e0bffd17 	ldw	r2,-12(fp)
   21f08:	10800017 	ldw	r2,0(r2)
   21f0c:	10800417 	ldw	r2,16(r2)
   21f10:	10000626 	beq	r2,zero,21f2c <close+0x6c>
   21f14:	e0bffd17 	ldw	r2,-12(fp)
   21f18:	10800017 	ldw	r2,0(r2)
   21f1c:	10800417 	ldw	r2,16(r2)
   21f20:	e13ffd17 	ldw	r4,-12(fp)
   21f24:	103ee83a 	callr	r2
   21f28:	00000106 	br	21f30 <close+0x70>
   21f2c:	0005883a 	mov	r2,zero
   21f30:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   21f34:	e13fff17 	ldw	r4,-4(fp)
   21f38:	002280c0 	call	2280c <alt_release_fd>
    if (rval < 0)
   21f3c:	e0bffe17 	ldw	r2,-8(fp)
   21f40:	1000070e 	bge	r2,zero,21f60 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   21f44:	0021e840 	call	21e84 <alt_get_errno>
   21f48:	1007883a 	mov	r3,r2
   21f4c:	e0bffe17 	ldw	r2,-8(fp)
   21f50:	0085c83a 	sub	r2,zero,r2
   21f54:	18800015 	stw	r2,0(r3)
      return -1;
   21f58:	00bfffc4 	movi	r2,-1
   21f5c:	00000706 	br	21f7c <close+0xbc>
    }
    return 0;
   21f60:	0005883a 	mov	r2,zero
   21f64:	00000506 	br	21f7c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   21f68:	0021e840 	call	21e84 <alt_get_errno>
   21f6c:	1007883a 	mov	r3,r2
   21f70:	00801444 	movi	r2,81
   21f74:	18800015 	stw	r2,0(r3)
    return -1;
   21f78:	00bfffc4 	movi	r2,-1
  }
}
   21f7c:	e037883a 	mov	sp,fp
   21f80:	dfc00117 	ldw	ra,4(sp)
   21f84:	df000017 	ldw	fp,0(sp)
   21f88:	dec00204 	addi	sp,sp,8
   21f8c:	f800283a 	ret

00021f90 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   21f90:	defffe04 	addi	sp,sp,-8
   21f94:	df000115 	stw	fp,4(sp)
   21f98:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   21f9c:	e03fff15 	stw	zero,-4(fp)
   21fa0:	00000506 	br	21fb8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   21fa4:	e0bfff17 	ldw	r2,-4(fp)
   21fa8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   21fac:	e0bfff17 	ldw	r2,-4(fp)
   21fb0:	10800804 	addi	r2,r2,32
   21fb4:	e0bfff15 	stw	r2,-4(fp)
   21fb8:	e0bfff17 	ldw	r2,-4(fp)
   21fbc:	10820030 	cmpltui	r2,r2,2048
   21fc0:	103ff81e 	bne	r2,zero,21fa4 <__alt_data_end+0xfffee724>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   21fc4:	0001883a 	nop
   21fc8:	e037883a 	mov	sp,fp
   21fcc:	df000017 	ldw	fp,0(sp)
   21fd0:	dec00104 	addi	sp,sp,4
   21fd4:	f800283a 	ret

00021fd8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   21fd8:	defffc04 	addi	sp,sp,-16
   21fdc:	df000315 	stw	fp,12(sp)
   21fe0:	df000304 	addi	fp,sp,12
   21fe4:	e13ffd15 	stw	r4,-12(fp)
   21fe8:	e17ffe15 	stw	r5,-8(fp)
   21fec:	e1bfff15 	stw	r6,-4(fp)
  return len;
   21ff0:	e0bfff17 	ldw	r2,-4(fp)
}
   21ff4:	e037883a 	mov	sp,fp
   21ff8:	df000017 	ldw	fp,0(sp)
   21ffc:	dec00104 	addi	sp,sp,4
   22000:	f800283a 	ret

00022004 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22004:	defffe04 	addi	sp,sp,-8
   22008:	dfc00115 	stw	ra,4(sp)
   2200c:	df000015 	stw	fp,0(sp)
   22010:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22014:	d0a00717 	ldw	r2,-32740(gp)
   22018:	10000326 	beq	r2,zero,22028 <alt_get_errno+0x24>
   2201c:	d0a00717 	ldw	r2,-32740(gp)
   22020:	103ee83a 	callr	r2
   22024:	00000106 	br	2202c <alt_get_errno+0x28>
   22028:	d0a60a04 	addi	r2,gp,-26584
}
   2202c:	e037883a 	mov	sp,fp
   22030:	dfc00117 	ldw	ra,4(sp)
   22034:	df000017 	ldw	fp,0(sp)
   22038:	dec00204 	addi	sp,sp,8
   2203c:	f800283a 	ret

00022040 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   22040:	defffa04 	addi	sp,sp,-24
   22044:	dfc00515 	stw	ra,20(sp)
   22048:	df000415 	stw	fp,16(sp)
   2204c:	df000404 	addi	fp,sp,16
   22050:	e13ffe15 	stw	r4,-8(fp)
   22054:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   22058:	e0bffe17 	ldw	r2,-8(fp)
   2205c:	10000326 	beq	r2,zero,2206c <alt_dev_llist_insert+0x2c>
   22060:	e0bffe17 	ldw	r2,-8(fp)
   22064:	10800217 	ldw	r2,8(r2)
   22068:	1000061e 	bne	r2,zero,22084 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2206c:	00220040 	call	22004 <alt_get_errno>
   22070:	1007883a 	mov	r3,r2
   22074:	00800584 	movi	r2,22
   22078:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2207c:	00bffa84 	movi	r2,-22
   22080:	00001306 	br	220d0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   22084:	e0bffe17 	ldw	r2,-8(fp)
   22088:	e0ffff17 	ldw	r3,-4(fp)
   2208c:	e0fffc15 	stw	r3,-16(fp)
   22090:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   22094:	e0bffd17 	ldw	r2,-12(fp)
   22098:	e0fffc17 	ldw	r3,-16(fp)
   2209c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   220a0:	e0bffc17 	ldw	r2,-16(fp)
   220a4:	10c00017 	ldw	r3,0(r2)
   220a8:	e0bffd17 	ldw	r2,-12(fp)
   220ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   220b0:	e0bffc17 	ldw	r2,-16(fp)
   220b4:	10800017 	ldw	r2,0(r2)
   220b8:	e0fffd17 	ldw	r3,-12(fp)
   220bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   220c0:	e0bffc17 	ldw	r2,-16(fp)
   220c4:	e0fffd17 	ldw	r3,-12(fp)
   220c8:	10c00015 	stw	r3,0(r2)

  return 0;  
   220cc:	0005883a 	mov	r2,zero
}
   220d0:	e037883a 	mov	sp,fp
   220d4:	dfc00117 	ldw	ra,4(sp)
   220d8:	df000017 	ldw	fp,0(sp)
   220dc:	dec00204 	addi	sp,sp,8
   220e0:	f800283a 	ret

000220e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   220e4:	defffd04 	addi	sp,sp,-12
   220e8:	dfc00215 	stw	ra,8(sp)
   220ec:	df000115 	stw	fp,4(sp)
   220f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   220f4:	008000b4 	movhi	r2,2
   220f8:	108c5b04 	addi	r2,r2,12652
   220fc:	e0bfff15 	stw	r2,-4(fp)
   22100:	00000606 	br	2211c <_do_ctors+0x38>
        (*ctor) (); 
   22104:	e0bfff17 	ldw	r2,-4(fp)
   22108:	10800017 	ldw	r2,0(r2)
   2210c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   22110:	e0bfff17 	ldw	r2,-4(fp)
   22114:	10bfff04 	addi	r2,r2,-4
   22118:	e0bfff15 	stw	r2,-4(fp)
   2211c:	e0ffff17 	ldw	r3,-4(fp)
   22120:	008000b4 	movhi	r2,2
   22124:	108c5c04 	addi	r2,r2,12656
   22128:	18bff62e 	bgeu	r3,r2,22104 <__alt_data_end+0xfffee884>
        (*ctor) (); 
}
   2212c:	0001883a 	nop
   22130:	e037883a 	mov	sp,fp
   22134:	dfc00117 	ldw	ra,4(sp)
   22138:	df000017 	ldw	fp,0(sp)
   2213c:	dec00204 	addi	sp,sp,8
   22140:	f800283a 	ret

00022144 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   22144:	defffd04 	addi	sp,sp,-12
   22148:	dfc00215 	stw	ra,8(sp)
   2214c:	df000115 	stw	fp,4(sp)
   22150:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22154:	008000b4 	movhi	r2,2
   22158:	108c5b04 	addi	r2,r2,12652
   2215c:	e0bfff15 	stw	r2,-4(fp)
   22160:	00000606 	br	2217c <_do_dtors+0x38>
        (*dtor) (); 
   22164:	e0bfff17 	ldw	r2,-4(fp)
   22168:	10800017 	ldw	r2,0(r2)
   2216c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22170:	e0bfff17 	ldw	r2,-4(fp)
   22174:	10bfff04 	addi	r2,r2,-4
   22178:	e0bfff15 	stw	r2,-4(fp)
   2217c:	e0ffff17 	ldw	r3,-4(fp)
   22180:	008000b4 	movhi	r2,2
   22184:	108c5c04 	addi	r2,r2,12656
   22188:	18bff62e 	bgeu	r3,r2,22164 <__alt_data_end+0xfffee8e4>
        (*dtor) (); 
}
   2218c:	0001883a 	nop
   22190:	e037883a 	mov	sp,fp
   22194:	dfc00117 	ldw	ra,4(sp)
   22198:	df000017 	ldw	fp,0(sp)
   2219c:	dec00204 	addi	sp,sp,8
   221a0:	f800283a 	ret

000221a4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   221a4:	defffe04 	addi	sp,sp,-8
   221a8:	dfc00115 	stw	ra,4(sp)
   221ac:	df000015 	stw	fp,0(sp)
   221b0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   221b4:	01408004 	movi	r5,512
   221b8:	0009883a 	mov	r4,zero
   221bc:	0022ad00 	call	22ad0 <alt_icache_flush>
#endif
}
   221c0:	0001883a 	nop
   221c4:	e037883a 	mov	sp,fp
   221c8:	dfc00117 	ldw	ra,4(sp)
   221cc:	df000017 	ldw	fp,0(sp)
   221d0:	dec00204 	addi	sp,sp,8
   221d4:	f800283a 	ret

000221d8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   221d8:	defff904 	addi	sp,sp,-28
   221dc:	dfc00615 	stw	ra,24(sp)
   221e0:	df000515 	stw	fp,20(sp)
   221e4:	df000504 	addi	fp,sp,20
   221e8:	e13ffc15 	stw	r4,-16(fp)
   221ec:	e17ffd15 	stw	r5,-12(fp)
   221f0:	e1bffe15 	stw	r6,-8(fp)
   221f4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   221f8:	e0800217 	ldw	r2,8(fp)
   221fc:	d8800015 	stw	r2,0(sp)
   22200:	e1ffff17 	ldw	r7,-4(fp)
   22204:	e1bffe17 	ldw	r6,-8(fp)
   22208:	e17ffd17 	ldw	r5,-12(fp)
   2220c:	e13ffc17 	ldw	r4,-16(fp)
   22210:	00223880 	call	22388 <alt_iic_isr_register>
}  
   22214:	e037883a 	mov	sp,fp
   22218:	dfc00117 	ldw	ra,4(sp)
   2221c:	df000017 	ldw	fp,0(sp)
   22220:	dec00204 	addi	sp,sp,8
   22224:	f800283a 	ret

00022228 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   22228:	defff904 	addi	sp,sp,-28
   2222c:	df000615 	stw	fp,24(sp)
   22230:	df000604 	addi	fp,sp,24
   22234:	e13ffe15 	stw	r4,-8(fp)
   22238:	e17fff15 	stw	r5,-4(fp)
   2223c:	e0bfff17 	ldw	r2,-4(fp)
   22240:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22244:	0005303a 	rdctl	r2,status
   22248:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2224c:	e0fffb17 	ldw	r3,-20(fp)
   22250:	00bfff84 	movi	r2,-2
   22254:	1884703a 	and	r2,r3,r2
   22258:	1001703a 	wrctl	status,r2
  
  return context;
   2225c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22260:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   22264:	00c00044 	movi	r3,1
   22268:	e0bffa17 	ldw	r2,-24(fp)
   2226c:	1884983a 	sll	r2,r3,r2
   22270:	1007883a 	mov	r3,r2
   22274:	d0a60817 	ldw	r2,-26592(gp)
   22278:	1884b03a 	or	r2,r3,r2
   2227c:	d0a60815 	stw	r2,-26592(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   22280:	d0a60817 	ldw	r2,-26592(gp)
   22284:	100170fa 	wrctl	ienable,r2
   22288:	e0bffc17 	ldw	r2,-16(fp)
   2228c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22290:	e0bffd17 	ldw	r2,-12(fp)
   22294:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22298:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2229c:	0001883a 	nop
}
   222a0:	e037883a 	mov	sp,fp
   222a4:	df000017 	ldw	fp,0(sp)
   222a8:	dec00104 	addi	sp,sp,4
   222ac:	f800283a 	ret

000222b0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   222b0:	defff904 	addi	sp,sp,-28
   222b4:	df000615 	stw	fp,24(sp)
   222b8:	df000604 	addi	fp,sp,24
   222bc:	e13ffe15 	stw	r4,-8(fp)
   222c0:	e17fff15 	stw	r5,-4(fp)
   222c4:	e0bfff17 	ldw	r2,-4(fp)
   222c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   222cc:	0005303a 	rdctl	r2,status
   222d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   222d4:	e0fffb17 	ldw	r3,-20(fp)
   222d8:	00bfff84 	movi	r2,-2
   222dc:	1884703a 	and	r2,r3,r2
   222e0:	1001703a 	wrctl	status,r2
  
  return context;
   222e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   222e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   222ec:	00c00044 	movi	r3,1
   222f0:	e0bffa17 	ldw	r2,-24(fp)
   222f4:	1884983a 	sll	r2,r3,r2
   222f8:	0084303a 	nor	r2,zero,r2
   222fc:	1007883a 	mov	r3,r2
   22300:	d0a60817 	ldw	r2,-26592(gp)
   22304:	1884703a 	and	r2,r3,r2
   22308:	d0a60815 	stw	r2,-26592(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2230c:	d0a60817 	ldw	r2,-26592(gp)
   22310:	100170fa 	wrctl	ienable,r2
   22314:	e0bffc17 	ldw	r2,-16(fp)
   22318:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2231c:	e0bffd17 	ldw	r2,-12(fp)
   22320:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22324:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   22328:	0001883a 	nop
}
   2232c:	e037883a 	mov	sp,fp
   22330:	df000017 	ldw	fp,0(sp)
   22334:	dec00104 	addi	sp,sp,4
   22338:	f800283a 	ret

0002233c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2233c:	defffc04 	addi	sp,sp,-16
   22340:	df000315 	stw	fp,12(sp)
   22344:	df000304 	addi	fp,sp,12
   22348:	e13ffe15 	stw	r4,-8(fp)
   2234c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   22350:	000530fa 	rdctl	r2,ienable
   22354:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   22358:	00c00044 	movi	r3,1
   2235c:	e0bfff17 	ldw	r2,-4(fp)
   22360:	1884983a 	sll	r2,r3,r2
   22364:	1007883a 	mov	r3,r2
   22368:	e0bffd17 	ldw	r2,-12(fp)
   2236c:	1884703a 	and	r2,r3,r2
   22370:	1004c03a 	cmpne	r2,r2,zero
   22374:	10803fcc 	andi	r2,r2,255
}
   22378:	e037883a 	mov	sp,fp
   2237c:	df000017 	ldw	fp,0(sp)
   22380:	dec00104 	addi	sp,sp,4
   22384:	f800283a 	ret

00022388 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22388:	defff504 	addi	sp,sp,-44
   2238c:	dfc00a15 	stw	ra,40(sp)
   22390:	df000915 	stw	fp,36(sp)
   22394:	df000904 	addi	fp,sp,36
   22398:	e13ffc15 	stw	r4,-16(fp)
   2239c:	e17ffd15 	stw	r5,-12(fp)
   223a0:	e1bffe15 	stw	r6,-8(fp)
   223a4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   223a8:	00bffa84 	movi	r2,-22
   223ac:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   223b0:	e0bffd17 	ldw	r2,-12(fp)
   223b4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   223b8:	e0bff817 	ldw	r2,-32(fp)
   223bc:	10800808 	cmpgei	r2,r2,32
   223c0:	1000271e 	bne	r2,zero,22460 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   223c4:	0005303a 	rdctl	r2,status
   223c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   223cc:	e0fffb17 	ldw	r3,-20(fp)
   223d0:	00bfff84 	movi	r2,-2
   223d4:	1884703a 	and	r2,r3,r2
   223d8:	1001703a 	wrctl	status,r2
  
  return context;
   223dc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   223e0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   223e4:	008000b4 	movhi	r2,2
   223e8:	10986a04 	addi	r2,r2,25000
   223ec:	e0fff817 	ldw	r3,-32(fp)
   223f0:	180690fa 	slli	r3,r3,3
   223f4:	10c5883a 	add	r2,r2,r3
   223f8:	e0fffe17 	ldw	r3,-8(fp)
   223fc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   22400:	008000b4 	movhi	r2,2
   22404:	10986a04 	addi	r2,r2,25000
   22408:	e0fff817 	ldw	r3,-32(fp)
   2240c:	180690fa 	slli	r3,r3,3
   22410:	10c5883a 	add	r2,r2,r3
   22414:	10800104 	addi	r2,r2,4
   22418:	e0ffff17 	ldw	r3,-4(fp)
   2241c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   22420:	e0bffe17 	ldw	r2,-8(fp)
   22424:	10000526 	beq	r2,zero,2243c <alt_iic_isr_register+0xb4>
   22428:	e0bff817 	ldw	r2,-32(fp)
   2242c:	100b883a 	mov	r5,r2
   22430:	e13ffc17 	ldw	r4,-16(fp)
   22434:	00222280 	call	22228 <alt_ic_irq_enable>
   22438:	00000406 	br	2244c <alt_iic_isr_register+0xc4>
   2243c:	e0bff817 	ldw	r2,-32(fp)
   22440:	100b883a 	mov	r5,r2
   22444:	e13ffc17 	ldw	r4,-16(fp)
   22448:	00222b00 	call	222b0 <alt_ic_irq_disable>
   2244c:	e0bff715 	stw	r2,-36(fp)
   22450:	e0bffa17 	ldw	r2,-24(fp)
   22454:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22458:	e0bff917 	ldw	r2,-28(fp)
   2245c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   22460:	e0bff717 	ldw	r2,-36(fp)
}
   22464:	e037883a 	mov	sp,fp
   22468:	dfc00117 	ldw	ra,4(sp)
   2246c:	df000017 	ldw	fp,0(sp)
   22470:	dec00204 	addi	sp,sp,8
   22474:	f800283a 	ret

00022478 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   22478:	defff904 	addi	sp,sp,-28
   2247c:	dfc00615 	stw	ra,24(sp)
   22480:	df000515 	stw	fp,20(sp)
   22484:	df000504 	addi	fp,sp,20
   22488:	e13ffc15 	stw	r4,-16(fp)
   2248c:	e17ffd15 	stw	r5,-12(fp)
   22490:	e1bffe15 	stw	r6,-8(fp)
   22494:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   22498:	e1bfff17 	ldw	r6,-4(fp)
   2249c:	e17ffe17 	ldw	r5,-8(fp)
   224a0:	e13ffd17 	ldw	r4,-12(fp)
   224a4:	00226b80 	call	226b8 <open>
   224a8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   224ac:	e0bffb17 	ldw	r2,-20(fp)
   224b0:	10001c16 	blt	r2,zero,22524 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   224b4:	008000b4 	movhi	r2,2
   224b8:	1090f604 	addi	r2,r2,17368
   224bc:	e0fffb17 	ldw	r3,-20(fp)
   224c0:	18c00324 	muli	r3,r3,12
   224c4:	10c5883a 	add	r2,r2,r3
   224c8:	10c00017 	ldw	r3,0(r2)
   224cc:	e0bffc17 	ldw	r2,-16(fp)
   224d0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   224d4:	008000b4 	movhi	r2,2
   224d8:	1090f604 	addi	r2,r2,17368
   224dc:	e0fffb17 	ldw	r3,-20(fp)
   224e0:	18c00324 	muli	r3,r3,12
   224e4:	10c5883a 	add	r2,r2,r3
   224e8:	10800104 	addi	r2,r2,4
   224ec:	10c00017 	ldw	r3,0(r2)
   224f0:	e0bffc17 	ldw	r2,-16(fp)
   224f4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   224f8:	008000b4 	movhi	r2,2
   224fc:	1090f604 	addi	r2,r2,17368
   22500:	e0fffb17 	ldw	r3,-20(fp)
   22504:	18c00324 	muli	r3,r3,12
   22508:	10c5883a 	add	r2,r2,r3
   2250c:	10800204 	addi	r2,r2,8
   22510:	10c00017 	ldw	r3,0(r2)
   22514:	e0bffc17 	ldw	r2,-16(fp)
   22518:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2251c:	e13ffb17 	ldw	r4,-20(fp)
   22520:	002280c0 	call	2280c <alt_release_fd>
  }
} 
   22524:	0001883a 	nop
   22528:	e037883a 	mov	sp,fp
   2252c:	dfc00117 	ldw	ra,4(sp)
   22530:	df000017 	ldw	fp,0(sp)
   22534:	dec00204 	addi	sp,sp,8
   22538:	f800283a 	ret

0002253c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2253c:	defffb04 	addi	sp,sp,-20
   22540:	dfc00415 	stw	ra,16(sp)
   22544:	df000315 	stw	fp,12(sp)
   22548:	df000304 	addi	fp,sp,12
   2254c:	e13ffd15 	stw	r4,-12(fp)
   22550:	e17ffe15 	stw	r5,-8(fp)
   22554:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   22558:	01c07fc4 	movi	r7,511
   2255c:	01800044 	movi	r6,1
   22560:	e17ffd17 	ldw	r5,-12(fp)
   22564:	010000b4 	movhi	r4,2
   22568:	2110f904 	addi	r4,r4,17380
   2256c:	00224780 	call	22478 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   22570:	01c07fc4 	movi	r7,511
   22574:	000d883a 	mov	r6,zero
   22578:	e17ffe17 	ldw	r5,-8(fp)
   2257c:	010000b4 	movhi	r4,2
   22580:	2110f604 	addi	r4,r4,17368
   22584:	00224780 	call	22478 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   22588:	01c07fc4 	movi	r7,511
   2258c:	01800044 	movi	r6,1
   22590:	e17fff17 	ldw	r5,-4(fp)
   22594:	010000b4 	movhi	r4,2
   22598:	2110fc04 	addi	r4,r4,17392
   2259c:	00224780 	call	22478 <alt_open_fd>
}  
   225a0:	0001883a 	nop
   225a4:	e037883a 	mov	sp,fp
   225a8:	dfc00117 	ldw	ra,4(sp)
   225ac:	df000017 	ldw	fp,0(sp)
   225b0:	dec00204 	addi	sp,sp,8
   225b4:	f800283a 	ret

000225b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   225b8:	defffe04 	addi	sp,sp,-8
   225bc:	dfc00115 	stw	ra,4(sp)
   225c0:	df000015 	stw	fp,0(sp)
   225c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   225c8:	d0a00717 	ldw	r2,-32740(gp)
   225cc:	10000326 	beq	r2,zero,225dc <alt_get_errno+0x24>
   225d0:	d0a00717 	ldw	r2,-32740(gp)
   225d4:	103ee83a 	callr	r2
   225d8:	00000106 	br	225e0 <alt_get_errno+0x28>
   225dc:	d0a60a04 	addi	r2,gp,-26584
}
   225e0:	e037883a 	mov	sp,fp
   225e4:	dfc00117 	ldw	ra,4(sp)
   225e8:	df000017 	ldw	fp,0(sp)
   225ec:	dec00204 	addi	sp,sp,8
   225f0:	f800283a 	ret

000225f4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   225f4:	defffd04 	addi	sp,sp,-12
   225f8:	df000215 	stw	fp,8(sp)
   225fc:	df000204 	addi	fp,sp,8
   22600:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   22604:	e0bfff17 	ldw	r2,-4(fp)
   22608:	10800217 	ldw	r2,8(r2)
   2260c:	10d00034 	orhi	r3,r2,16384
   22610:	e0bfff17 	ldw	r2,-4(fp)
   22614:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22618:	e03ffe15 	stw	zero,-8(fp)
   2261c:	00001d06 	br	22694 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22620:	008000b4 	movhi	r2,2
   22624:	1090f604 	addi	r2,r2,17368
   22628:	e0fffe17 	ldw	r3,-8(fp)
   2262c:	18c00324 	muli	r3,r3,12
   22630:	10c5883a 	add	r2,r2,r3
   22634:	10c00017 	ldw	r3,0(r2)
   22638:	e0bfff17 	ldw	r2,-4(fp)
   2263c:	10800017 	ldw	r2,0(r2)
   22640:	1880111e 	bne	r3,r2,22688 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22644:	008000b4 	movhi	r2,2
   22648:	1090f604 	addi	r2,r2,17368
   2264c:	e0fffe17 	ldw	r3,-8(fp)
   22650:	18c00324 	muli	r3,r3,12
   22654:	10c5883a 	add	r2,r2,r3
   22658:	10800204 	addi	r2,r2,8
   2265c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22660:	1000090e 	bge	r2,zero,22688 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   22664:	e0bffe17 	ldw	r2,-8(fp)
   22668:	10c00324 	muli	r3,r2,12
   2266c:	008000b4 	movhi	r2,2
   22670:	1090f604 	addi	r2,r2,17368
   22674:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22678:	e0bfff17 	ldw	r2,-4(fp)
   2267c:	18800226 	beq	r3,r2,22688 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   22680:	00bffcc4 	movi	r2,-13
   22684:	00000806 	br	226a8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22688:	e0bffe17 	ldw	r2,-8(fp)
   2268c:	10800044 	addi	r2,r2,1
   22690:	e0bffe15 	stw	r2,-8(fp)
   22694:	d0a00617 	ldw	r2,-32744(gp)
   22698:	1007883a 	mov	r3,r2
   2269c:	e0bffe17 	ldw	r2,-8(fp)
   226a0:	18bfdf2e 	bgeu	r3,r2,22620 <__alt_data_end+0xfffeeda0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   226a4:	0005883a 	mov	r2,zero
}
   226a8:	e037883a 	mov	sp,fp
   226ac:	df000017 	ldw	fp,0(sp)
   226b0:	dec00104 	addi	sp,sp,4
   226b4:	f800283a 	ret

000226b8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   226b8:	defff604 	addi	sp,sp,-40
   226bc:	dfc00915 	stw	ra,36(sp)
   226c0:	df000815 	stw	fp,32(sp)
   226c4:	df000804 	addi	fp,sp,32
   226c8:	e13ffd15 	stw	r4,-12(fp)
   226cc:	e17ffe15 	stw	r5,-8(fp)
   226d0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   226d4:	00bfffc4 	movi	r2,-1
   226d8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   226dc:	00bffb44 	movi	r2,-19
   226e0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   226e4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   226e8:	d1600404 	addi	r5,gp,-32752
   226ec:	e13ffd17 	ldw	r4,-12(fp)
   226f0:	00228940 	call	22894 <alt_find_dev>
   226f4:	e0bff815 	stw	r2,-32(fp)
   226f8:	e0bff817 	ldw	r2,-32(fp)
   226fc:	1000051e 	bne	r2,zero,22714 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   22700:	e13ffd17 	ldw	r4,-12(fp)
   22704:	00229240 	call	22924 <alt_find_file>
   22708:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2270c:	00800044 	movi	r2,1
   22710:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   22714:	e0bff817 	ldw	r2,-32(fp)
   22718:	10002926 	beq	r2,zero,227c0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2271c:	e13ff817 	ldw	r4,-32(fp)
   22720:	0022a2c0 	call	22a2c <alt_get_fd>
   22724:	e0bff915 	stw	r2,-28(fp)
   22728:	e0bff917 	ldw	r2,-28(fp)
   2272c:	1000030e 	bge	r2,zero,2273c <open+0x84>
    {
      status = index;
   22730:	e0bff917 	ldw	r2,-28(fp)
   22734:	e0bffa15 	stw	r2,-24(fp)
   22738:	00002306 	br	227c8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   2273c:	e0bff917 	ldw	r2,-28(fp)
   22740:	10c00324 	muli	r3,r2,12
   22744:	008000b4 	movhi	r2,2
   22748:	1090f604 	addi	r2,r2,17368
   2274c:	1885883a 	add	r2,r3,r2
   22750:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   22754:	e0fffe17 	ldw	r3,-8(fp)
   22758:	00900034 	movhi	r2,16384
   2275c:	10bfffc4 	addi	r2,r2,-1
   22760:	1886703a 	and	r3,r3,r2
   22764:	e0bffc17 	ldw	r2,-16(fp)
   22768:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2276c:	e0bffb17 	ldw	r2,-20(fp)
   22770:	1000051e 	bne	r2,zero,22788 <open+0xd0>
   22774:	e13ffc17 	ldw	r4,-16(fp)
   22778:	00225f40 	call	225f4 <alt_file_locked>
   2277c:	e0bffa15 	stw	r2,-24(fp)
   22780:	e0bffa17 	ldw	r2,-24(fp)
   22784:	10001016 	blt	r2,zero,227c8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   22788:	e0bff817 	ldw	r2,-32(fp)
   2278c:	10800317 	ldw	r2,12(r2)
   22790:	10000826 	beq	r2,zero,227b4 <open+0xfc>
   22794:	e0bff817 	ldw	r2,-32(fp)
   22798:	10800317 	ldw	r2,12(r2)
   2279c:	e1ffff17 	ldw	r7,-4(fp)
   227a0:	e1bffe17 	ldw	r6,-8(fp)
   227a4:	e17ffd17 	ldw	r5,-12(fp)
   227a8:	e13ffc17 	ldw	r4,-16(fp)
   227ac:	103ee83a 	callr	r2
   227b0:	00000106 	br	227b8 <open+0x100>
   227b4:	0005883a 	mov	r2,zero
   227b8:	e0bffa15 	stw	r2,-24(fp)
   227bc:	00000206 	br	227c8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   227c0:	00bffb44 	movi	r2,-19
   227c4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   227c8:	e0bffa17 	ldw	r2,-24(fp)
   227cc:	1000090e 	bge	r2,zero,227f4 <open+0x13c>
  {
    alt_release_fd (index);  
   227d0:	e13ff917 	ldw	r4,-28(fp)
   227d4:	002280c0 	call	2280c <alt_release_fd>
    ALT_ERRNO = -status;
   227d8:	00225b80 	call	225b8 <alt_get_errno>
   227dc:	1007883a 	mov	r3,r2
   227e0:	e0bffa17 	ldw	r2,-24(fp)
   227e4:	0085c83a 	sub	r2,zero,r2
   227e8:	18800015 	stw	r2,0(r3)
    return -1;
   227ec:	00bfffc4 	movi	r2,-1
   227f0:	00000106 	br	227f8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   227f4:	e0bff917 	ldw	r2,-28(fp)
}
   227f8:	e037883a 	mov	sp,fp
   227fc:	dfc00117 	ldw	ra,4(sp)
   22800:	df000017 	ldw	fp,0(sp)
   22804:	dec00204 	addi	sp,sp,8
   22808:	f800283a 	ret

0002280c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2280c:	defffe04 	addi	sp,sp,-8
   22810:	df000115 	stw	fp,4(sp)
   22814:	df000104 	addi	fp,sp,4
   22818:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2281c:	e0bfff17 	ldw	r2,-4(fp)
   22820:	108000d0 	cmplti	r2,r2,3
   22824:	10000d1e 	bne	r2,zero,2285c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   22828:	008000b4 	movhi	r2,2
   2282c:	1090f604 	addi	r2,r2,17368
   22830:	e0ffff17 	ldw	r3,-4(fp)
   22834:	18c00324 	muli	r3,r3,12
   22838:	10c5883a 	add	r2,r2,r3
   2283c:	10800204 	addi	r2,r2,8
   22840:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   22844:	008000b4 	movhi	r2,2
   22848:	1090f604 	addi	r2,r2,17368
   2284c:	e0ffff17 	ldw	r3,-4(fp)
   22850:	18c00324 	muli	r3,r3,12
   22854:	10c5883a 	add	r2,r2,r3
   22858:	10000015 	stw	zero,0(r2)
  }
}
   2285c:	0001883a 	nop
   22860:	e037883a 	mov	sp,fp
   22864:	df000017 	ldw	fp,0(sp)
   22868:	dec00104 	addi	sp,sp,4
   2286c:	f800283a 	ret

00022870 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   22870:	deffff04 	addi	sp,sp,-4
   22874:	df000015 	stw	fp,0(sp)
   22878:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2287c:	000170fa 	wrctl	ienable,zero
}
   22880:	0001883a 	nop
   22884:	e037883a 	mov	sp,fp
   22888:	df000017 	ldw	fp,0(sp)
   2288c:	dec00104 	addi	sp,sp,4
   22890:	f800283a 	ret

00022894 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   22894:	defffa04 	addi	sp,sp,-24
   22898:	dfc00515 	stw	ra,20(sp)
   2289c:	df000415 	stw	fp,16(sp)
   228a0:	df000404 	addi	fp,sp,16
   228a4:	e13ffe15 	stw	r4,-8(fp)
   228a8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   228ac:	e0bfff17 	ldw	r2,-4(fp)
   228b0:	10800017 	ldw	r2,0(r2)
   228b4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   228b8:	e13ffe17 	ldw	r4,-8(fp)
   228bc:	0022e0c0 	call	22e0c <strlen>
   228c0:	10800044 	addi	r2,r2,1
   228c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   228c8:	00000d06 	br	22900 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   228cc:	e0bffc17 	ldw	r2,-16(fp)
   228d0:	10800217 	ldw	r2,8(r2)
   228d4:	e0fffd17 	ldw	r3,-12(fp)
   228d8:	180d883a 	mov	r6,r3
   228dc:	e17ffe17 	ldw	r5,-8(fp)
   228e0:	1009883a 	mov	r4,r2
   228e4:	0022c480 	call	22c48 <memcmp>
   228e8:	1000021e 	bne	r2,zero,228f4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   228ec:	e0bffc17 	ldw	r2,-16(fp)
   228f0:	00000706 	br	22910 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   228f4:	e0bffc17 	ldw	r2,-16(fp)
   228f8:	10800017 	ldw	r2,0(r2)
   228fc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   22900:	e0fffc17 	ldw	r3,-16(fp)
   22904:	e0bfff17 	ldw	r2,-4(fp)
   22908:	18bff01e 	bne	r3,r2,228cc <__alt_data_end+0xfffef04c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2290c:	0005883a 	mov	r2,zero
}
   22910:	e037883a 	mov	sp,fp
   22914:	dfc00117 	ldw	ra,4(sp)
   22918:	df000017 	ldw	fp,0(sp)
   2291c:	dec00204 	addi	sp,sp,8
   22920:	f800283a 	ret

00022924 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   22924:	defffb04 	addi	sp,sp,-20
   22928:	dfc00415 	stw	ra,16(sp)
   2292c:	df000315 	stw	fp,12(sp)
   22930:	df000304 	addi	fp,sp,12
   22934:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   22938:	d0a00217 	ldw	r2,-32760(gp)
   2293c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   22940:	00003106 	br	22a08 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   22944:	e0bffd17 	ldw	r2,-12(fp)
   22948:	10800217 	ldw	r2,8(r2)
   2294c:	1009883a 	mov	r4,r2
   22950:	0022e0c0 	call	22e0c <strlen>
   22954:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   22958:	e0bffd17 	ldw	r2,-12(fp)
   2295c:	10c00217 	ldw	r3,8(r2)
   22960:	e0bffe17 	ldw	r2,-8(fp)
   22964:	10bfffc4 	addi	r2,r2,-1
   22968:	1885883a 	add	r2,r3,r2
   2296c:	10800003 	ldbu	r2,0(r2)
   22970:	10803fcc 	andi	r2,r2,255
   22974:	1080201c 	xori	r2,r2,128
   22978:	10bfe004 	addi	r2,r2,-128
   2297c:	10800bd8 	cmpnei	r2,r2,47
   22980:	1000031e 	bne	r2,zero,22990 <alt_find_file+0x6c>
    {
      len -= 1;
   22984:	e0bffe17 	ldw	r2,-8(fp)
   22988:	10bfffc4 	addi	r2,r2,-1
   2298c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   22990:	e0bffe17 	ldw	r2,-8(fp)
   22994:	e0ffff17 	ldw	r3,-4(fp)
   22998:	1885883a 	add	r2,r3,r2
   2299c:	10800003 	ldbu	r2,0(r2)
   229a0:	10803fcc 	andi	r2,r2,255
   229a4:	1080201c 	xori	r2,r2,128
   229a8:	10bfe004 	addi	r2,r2,-128
   229ac:	10800be0 	cmpeqi	r2,r2,47
   229b0:	1000081e 	bne	r2,zero,229d4 <alt_find_file+0xb0>
   229b4:	e0bffe17 	ldw	r2,-8(fp)
   229b8:	e0ffff17 	ldw	r3,-4(fp)
   229bc:	1885883a 	add	r2,r3,r2
   229c0:	10800003 	ldbu	r2,0(r2)
   229c4:	10803fcc 	andi	r2,r2,255
   229c8:	1080201c 	xori	r2,r2,128
   229cc:	10bfe004 	addi	r2,r2,-128
   229d0:	10000a1e 	bne	r2,zero,229fc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   229d4:	e0bffd17 	ldw	r2,-12(fp)
   229d8:	10800217 	ldw	r2,8(r2)
   229dc:	e0fffe17 	ldw	r3,-8(fp)
   229e0:	180d883a 	mov	r6,r3
   229e4:	e17fff17 	ldw	r5,-4(fp)
   229e8:	1009883a 	mov	r4,r2
   229ec:	0022c480 	call	22c48 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   229f0:	1000021e 	bne	r2,zero,229fc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   229f4:	e0bffd17 	ldw	r2,-12(fp)
   229f8:	00000706 	br	22a18 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   229fc:	e0bffd17 	ldw	r2,-12(fp)
   22a00:	10800017 	ldw	r2,0(r2)
   22a04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   22a08:	e0fffd17 	ldw	r3,-12(fp)
   22a0c:	d0a00204 	addi	r2,gp,-32760
   22a10:	18bfcc1e 	bne	r3,r2,22944 <__alt_data_end+0xfffef0c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   22a14:	0005883a 	mov	r2,zero
}
   22a18:	e037883a 	mov	sp,fp
   22a1c:	dfc00117 	ldw	ra,4(sp)
   22a20:	df000017 	ldw	fp,0(sp)
   22a24:	dec00204 	addi	sp,sp,8
   22a28:	f800283a 	ret

00022a2c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   22a2c:	defffc04 	addi	sp,sp,-16
   22a30:	df000315 	stw	fp,12(sp)
   22a34:	df000304 	addi	fp,sp,12
   22a38:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   22a3c:	00bffa04 	movi	r2,-24
   22a40:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   22a44:	e03ffd15 	stw	zero,-12(fp)
   22a48:	00001906 	br	22ab0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   22a4c:	008000b4 	movhi	r2,2
   22a50:	1090f604 	addi	r2,r2,17368
   22a54:	e0fffd17 	ldw	r3,-12(fp)
   22a58:	18c00324 	muli	r3,r3,12
   22a5c:	10c5883a 	add	r2,r2,r3
   22a60:	10800017 	ldw	r2,0(r2)
   22a64:	10000f1e 	bne	r2,zero,22aa4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   22a68:	008000b4 	movhi	r2,2
   22a6c:	1090f604 	addi	r2,r2,17368
   22a70:	e0fffd17 	ldw	r3,-12(fp)
   22a74:	18c00324 	muli	r3,r3,12
   22a78:	10c5883a 	add	r2,r2,r3
   22a7c:	e0ffff17 	ldw	r3,-4(fp)
   22a80:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   22a84:	d0e00617 	ldw	r3,-32744(gp)
   22a88:	e0bffd17 	ldw	r2,-12(fp)
   22a8c:	1880020e 	bge	r3,r2,22a98 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   22a90:	e0bffd17 	ldw	r2,-12(fp)
   22a94:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   22a98:	e0bffd17 	ldw	r2,-12(fp)
   22a9c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   22aa0:	00000606 	br	22abc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   22aa4:	e0bffd17 	ldw	r2,-12(fp)
   22aa8:	10800044 	addi	r2,r2,1
   22aac:	e0bffd15 	stw	r2,-12(fp)
   22ab0:	e0bffd17 	ldw	r2,-12(fp)
   22ab4:	10800810 	cmplti	r2,r2,32
   22ab8:	103fe41e 	bne	r2,zero,22a4c <__alt_data_end+0xfffef1cc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   22abc:	e0bffe17 	ldw	r2,-8(fp)
}
   22ac0:	e037883a 	mov	sp,fp
   22ac4:	df000017 	ldw	fp,0(sp)
   22ac8:	dec00104 	addi	sp,sp,4
   22acc:	f800283a 	ret

00022ad0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   22ad0:	defffb04 	addi	sp,sp,-20
   22ad4:	df000415 	stw	fp,16(sp)
   22ad8:	df000404 	addi	fp,sp,16
   22adc:	e13ffe15 	stw	r4,-8(fp)
   22ae0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   22ae4:	e0bfff17 	ldw	r2,-4(fp)
   22ae8:	10808070 	cmpltui	r2,r2,513
   22aec:	1000021e 	bne	r2,zero,22af8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   22af0:	00808004 	movi	r2,512
   22af4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   22af8:	e0fffe17 	ldw	r3,-8(fp)
   22afc:	e0bfff17 	ldw	r2,-4(fp)
   22b00:	1885883a 	add	r2,r3,r2
   22b04:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   22b08:	e0bffe17 	ldw	r2,-8(fp)
   22b0c:	e0bffc15 	stw	r2,-16(fp)
   22b10:	00000506 	br	22b28 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   22b14:	e0bffc17 	ldw	r2,-16(fp)
   22b18:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   22b1c:	e0bffc17 	ldw	r2,-16(fp)
   22b20:	10800804 	addi	r2,r2,32
   22b24:	e0bffc15 	stw	r2,-16(fp)
   22b28:	e0fffc17 	ldw	r3,-16(fp)
   22b2c:	e0bffd17 	ldw	r2,-12(fp)
   22b30:	18bff836 	bltu	r3,r2,22b14 <__alt_data_end+0xfffef294>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   22b34:	e0bffe17 	ldw	r2,-8(fp)
   22b38:	108007cc 	andi	r2,r2,31
   22b3c:	10000226 	beq	r2,zero,22b48 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   22b40:	e0bffc17 	ldw	r2,-16(fp)
   22b44:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   22b48:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   22b4c:	0001883a 	nop
   22b50:	e037883a 	mov	sp,fp
   22b54:	df000017 	ldw	fp,0(sp)
   22b58:	dec00104 	addi	sp,sp,4
   22b5c:	f800283a 	ret

00022b60 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   22b60:	defffe04 	addi	sp,sp,-8
   22b64:	df000115 	stw	fp,4(sp)
   22b68:	df000104 	addi	fp,sp,4
   22b6c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   22b70:	e0bfff17 	ldw	r2,-4(fp)
   22b74:	10bffe84 	addi	r2,r2,-6
   22b78:	10c00428 	cmpgeui	r3,r2,16
   22b7c:	18001a1e 	bne	r3,zero,22be8 <alt_exception_cause_generated_bad_addr+0x88>
   22b80:	100690ba 	slli	r3,r2,2
   22b84:	008000b4 	movhi	r2,2
   22b88:	108ae604 	addi	r2,r2,11160
   22b8c:	1885883a 	add	r2,r3,r2
   22b90:	10800017 	ldw	r2,0(r2)
   22b94:	1000683a 	jmp	r2
   22b98:	00022bd8 	cmpnei	zero,zero,2223
   22b9c:	00022bd8 	cmpnei	zero,zero,2223
   22ba0:	00022be8 	cmpgeui	zero,zero,2223
   22ba4:	00022be8 	cmpgeui	zero,zero,2223
   22ba8:	00022be8 	cmpgeui	zero,zero,2223
   22bac:	00022bd8 	cmpnei	zero,zero,2223
   22bb0:	00022be0 	cmpeqi	zero,zero,2223
   22bb4:	00022be8 	cmpgeui	zero,zero,2223
   22bb8:	00022bd8 	cmpnei	zero,zero,2223
   22bbc:	00022bd8 	cmpnei	zero,zero,2223
   22bc0:	00022be8 	cmpgeui	zero,zero,2223
   22bc4:	00022bd8 	cmpnei	zero,zero,2223
   22bc8:	00022be0 	cmpeqi	zero,zero,2223
   22bcc:	00022be8 	cmpgeui	zero,zero,2223
   22bd0:	00022be8 	cmpgeui	zero,zero,2223
   22bd4:	00022bd8 	cmpnei	zero,zero,2223
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   22bd8:	00800044 	movi	r2,1
   22bdc:	00000306 	br	22bec <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   22be0:	0005883a 	mov	r2,zero
   22be4:	00000106 	br	22bec <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   22be8:	0005883a 	mov	r2,zero
  }
}
   22bec:	e037883a 	mov	sp,fp
   22bf0:	df000017 	ldw	fp,0(sp)
   22bf4:	dec00104 	addi	sp,sp,4
   22bf8:	f800283a 	ret

00022bfc <atexit>:
   22bfc:	200b883a 	mov	r5,r4
   22c00:	000f883a 	mov	r7,zero
   22c04:	000d883a 	mov	r6,zero
   22c08:	0009883a 	mov	r4,zero
   22c0c:	0022ea41 	jmpi	22ea4 <__register_exitproc>

00022c10 <exit>:
   22c10:	defffe04 	addi	sp,sp,-8
   22c14:	000b883a 	mov	r5,zero
   22c18:	dc000015 	stw	r16,0(sp)
   22c1c:	dfc00115 	stw	ra,4(sp)
   22c20:	2021883a 	mov	r16,r4
   22c24:	0022fbc0 	call	22fbc <__call_exitprocs>
   22c28:	008000b4 	movhi	r2,2
   22c2c:	10926804 	addi	r2,r2,18848
   22c30:	11000017 	ldw	r4,0(r2)
   22c34:	20800f17 	ldw	r2,60(r4)
   22c38:	10000126 	beq	r2,zero,22c40 <exit+0x30>
   22c3c:	103ee83a 	callr	r2
   22c40:	8009883a 	mov	r4,r16
   22c44:	002313c0 	call	2313c <_exit>

00022c48 <memcmp>:
   22c48:	01c000c4 	movi	r7,3
   22c4c:	3980192e 	bgeu	r7,r6,22cb4 <memcmp+0x6c>
   22c50:	2144b03a 	or	r2,r4,r5
   22c54:	11c4703a 	and	r2,r2,r7
   22c58:	10000f26 	beq	r2,zero,22c98 <memcmp+0x50>
   22c5c:	20800003 	ldbu	r2,0(r4)
   22c60:	28c00003 	ldbu	r3,0(r5)
   22c64:	10c0151e 	bne	r2,r3,22cbc <memcmp+0x74>
   22c68:	31bfff84 	addi	r6,r6,-2
   22c6c:	01ffffc4 	movi	r7,-1
   22c70:	00000406 	br	22c84 <memcmp+0x3c>
   22c74:	20800003 	ldbu	r2,0(r4)
   22c78:	28c00003 	ldbu	r3,0(r5)
   22c7c:	31bfffc4 	addi	r6,r6,-1
   22c80:	10c00e1e 	bne	r2,r3,22cbc <memcmp+0x74>
   22c84:	21000044 	addi	r4,r4,1
   22c88:	29400044 	addi	r5,r5,1
   22c8c:	31fff91e 	bne	r6,r7,22c74 <__alt_data_end+0xfffef3f4>
   22c90:	0005883a 	mov	r2,zero
   22c94:	f800283a 	ret
   22c98:	20c00017 	ldw	r3,0(r4)
   22c9c:	28800017 	ldw	r2,0(r5)
   22ca0:	18bfee1e 	bne	r3,r2,22c5c <__alt_data_end+0xfffef3dc>
   22ca4:	31bfff04 	addi	r6,r6,-4
   22ca8:	21000104 	addi	r4,r4,4
   22cac:	29400104 	addi	r5,r5,4
   22cb0:	39bff936 	bltu	r7,r6,22c98 <__alt_data_end+0xfffef418>
   22cb4:	303fe91e 	bne	r6,zero,22c5c <__alt_data_end+0xfffef3dc>
   22cb8:	003ff506 	br	22c90 <__alt_data_end+0xfffef410>
   22cbc:	10c5c83a 	sub	r2,r2,r3
   22cc0:	f800283a 	ret

00022cc4 <memcpy>:
   22cc4:	defffd04 	addi	sp,sp,-12
   22cc8:	dfc00215 	stw	ra,8(sp)
   22ccc:	dc400115 	stw	r17,4(sp)
   22cd0:	dc000015 	stw	r16,0(sp)
   22cd4:	00c003c4 	movi	r3,15
   22cd8:	2005883a 	mov	r2,r4
   22cdc:	1980452e 	bgeu	r3,r6,22df4 <memcpy+0x130>
   22ce0:	2906b03a 	or	r3,r5,r4
   22ce4:	18c000cc 	andi	r3,r3,3
   22ce8:	1800441e 	bne	r3,zero,22dfc <memcpy+0x138>
   22cec:	347ffc04 	addi	r17,r6,-16
   22cf0:	8822d13a 	srli	r17,r17,4
   22cf4:	28c00104 	addi	r3,r5,4
   22cf8:	23400104 	addi	r13,r4,4
   22cfc:	8820913a 	slli	r16,r17,4
   22d00:	2b000204 	addi	r12,r5,8
   22d04:	22c00204 	addi	r11,r4,8
   22d08:	84000504 	addi	r16,r16,20
   22d0c:	2a800304 	addi	r10,r5,12
   22d10:	22400304 	addi	r9,r4,12
   22d14:	2c21883a 	add	r16,r5,r16
   22d18:	2811883a 	mov	r8,r5
   22d1c:	200f883a 	mov	r7,r4
   22d20:	41000017 	ldw	r4,0(r8)
   22d24:	1fc00017 	ldw	ra,0(r3)
   22d28:	63c00017 	ldw	r15,0(r12)
   22d2c:	39000015 	stw	r4,0(r7)
   22d30:	53800017 	ldw	r14,0(r10)
   22d34:	6fc00015 	stw	ra,0(r13)
   22d38:	5bc00015 	stw	r15,0(r11)
   22d3c:	4b800015 	stw	r14,0(r9)
   22d40:	18c00404 	addi	r3,r3,16
   22d44:	39c00404 	addi	r7,r7,16
   22d48:	42000404 	addi	r8,r8,16
   22d4c:	6b400404 	addi	r13,r13,16
   22d50:	63000404 	addi	r12,r12,16
   22d54:	5ac00404 	addi	r11,r11,16
   22d58:	52800404 	addi	r10,r10,16
   22d5c:	4a400404 	addi	r9,r9,16
   22d60:	1c3fef1e 	bne	r3,r16,22d20 <__alt_data_end+0xfffef4a0>
   22d64:	89c00044 	addi	r7,r17,1
   22d68:	380e913a 	slli	r7,r7,4
   22d6c:	310003cc 	andi	r4,r6,15
   22d70:	02c000c4 	movi	r11,3
   22d74:	11c7883a 	add	r3,r2,r7
   22d78:	29cb883a 	add	r5,r5,r7
   22d7c:	5900212e 	bgeu	r11,r4,22e04 <memcpy+0x140>
   22d80:	1813883a 	mov	r9,r3
   22d84:	2811883a 	mov	r8,r5
   22d88:	200f883a 	mov	r7,r4
   22d8c:	42800017 	ldw	r10,0(r8)
   22d90:	4a400104 	addi	r9,r9,4
   22d94:	39ffff04 	addi	r7,r7,-4
   22d98:	4abfff15 	stw	r10,-4(r9)
   22d9c:	42000104 	addi	r8,r8,4
   22da0:	59fffa36 	bltu	r11,r7,22d8c <__alt_data_end+0xfffef50c>
   22da4:	213fff04 	addi	r4,r4,-4
   22da8:	2008d0ba 	srli	r4,r4,2
   22dac:	318000cc 	andi	r6,r6,3
   22db0:	21000044 	addi	r4,r4,1
   22db4:	2109883a 	add	r4,r4,r4
   22db8:	2109883a 	add	r4,r4,r4
   22dbc:	1907883a 	add	r3,r3,r4
   22dc0:	290b883a 	add	r5,r5,r4
   22dc4:	30000626 	beq	r6,zero,22de0 <memcpy+0x11c>
   22dc8:	198d883a 	add	r6,r3,r6
   22dcc:	29c00003 	ldbu	r7,0(r5)
   22dd0:	18c00044 	addi	r3,r3,1
   22dd4:	29400044 	addi	r5,r5,1
   22dd8:	19ffffc5 	stb	r7,-1(r3)
   22ddc:	19bffb1e 	bne	r3,r6,22dcc <__alt_data_end+0xfffef54c>
   22de0:	dfc00217 	ldw	ra,8(sp)
   22de4:	dc400117 	ldw	r17,4(sp)
   22de8:	dc000017 	ldw	r16,0(sp)
   22dec:	dec00304 	addi	sp,sp,12
   22df0:	f800283a 	ret
   22df4:	2007883a 	mov	r3,r4
   22df8:	003ff206 	br	22dc4 <__alt_data_end+0xfffef544>
   22dfc:	2007883a 	mov	r3,r4
   22e00:	003ff106 	br	22dc8 <__alt_data_end+0xfffef548>
   22e04:	200d883a 	mov	r6,r4
   22e08:	003fee06 	br	22dc4 <__alt_data_end+0xfffef544>

00022e0c <strlen>:
   22e0c:	208000cc 	andi	r2,r4,3
   22e10:	10002026 	beq	r2,zero,22e94 <strlen+0x88>
   22e14:	20800007 	ldb	r2,0(r4)
   22e18:	10002026 	beq	r2,zero,22e9c <strlen+0x90>
   22e1c:	2005883a 	mov	r2,r4
   22e20:	00000206 	br	22e2c <strlen+0x20>
   22e24:	10c00007 	ldb	r3,0(r2)
   22e28:	18001826 	beq	r3,zero,22e8c <strlen+0x80>
   22e2c:	10800044 	addi	r2,r2,1
   22e30:	10c000cc 	andi	r3,r2,3
   22e34:	183ffb1e 	bne	r3,zero,22e24 <__alt_data_end+0xfffef5a4>
   22e38:	10c00017 	ldw	r3,0(r2)
   22e3c:	01ffbff4 	movhi	r7,65279
   22e40:	39ffbfc4 	addi	r7,r7,-257
   22e44:	00ca303a 	nor	r5,zero,r3
   22e48:	01a02074 	movhi	r6,32897
   22e4c:	19c7883a 	add	r3,r3,r7
   22e50:	31a02004 	addi	r6,r6,-32640
   22e54:	1946703a 	and	r3,r3,r5
   22e58:	1986703a 	and	r3,r3,r6
   22e5c:	1800091e 	bne	r3,zero,22e84 <strlen+0x78>
   22e60:	10800104 	addi	r2,r2,4
   22e64:	10c00017 	ldw	r3,0(r2)
   22e68:	19cb883a 	add	r5,r3,r7
   22e6c:	00c6303a 	nor	r3,zero,r3
   22e70:	28c6703a 	and	r3,r5,r3
   22e74:	1986703a 	and	r3,r3,r6
   22e78:	183ff926 	beq	r3,zero,22e60 <__alt_data_end+0xfffef5e0>
   22e7c:	00000106 	br	22e84 <strlen+0x78>
   22e80:	10800044 	addi	r2,r2,1
   22e84:	10c00007 	ldb	r3,0(r2)
   22e88:	183ffd1e 	bne	r3,zero,22e80 <__alt_data_end+0xfffef600>
   22e8c:	1105c83a 	sub	r2,r2,r4
   22e90:	f800283a 	ret
   22e94:	2005883a 	mov	r2,r4
   22e98:	003fe706 	br	22e38 <__alt_data_end+0xfffef5b8>
   22e9c:	0005883a 	mov	r2,zero
   22ea0:	f800283a 	ret

00022ea4 <__register_exitproc>:
   22ea4:	defffa04 	addi	sp,sp,-24
   22ea8:	dc000315 	stw	r16,12(sp)
   22eac:	040000b4 	movhi	r16,2
   22eb0:	84126804 	addi	r16,r16,18848
   22eb4:	80c00017 	ldw	r3,0(r16)
   22eb8:	dc400415 	stw	r17,16(sp)
   22ebc:	dfc00515 	stw	ra,20(sp)
   22ec0:	18805217 	ldw	r2,328(r3)
   22ec4:	2023883a 	mov	r17,r4
   22ec8:	10003726 	beq	r2,zero,22fa8 <__register_exitproc+0x104>
   22ecc:	10c00117 	ldw	r3,4(r2)
   22ed0:	010007c4 	movi	r4,31
   22ed4:	20c00e16 	blt	r4,r3,22f10 <__register_exitproc+0x6c>
   22ed8:	1a000044 	addi	r8,r3,1
   22edc:	8800221e 	bne	r17,zero,22f68 <__register_exitproc+0xc4>
   22ee0:	18c00084 	addi	r3,r3,2
   22ee4:	18c7883a 	add	r3,r3,r3
   22ee8:	18c7883a 	add	r3,r3,r3
   22eec:	12000115 	stw	r8,4(r2)
   22ef0:	10c7883a 	add	r3,r2,r3
   22ef4:	19400015 	stw	r5,0(r3)
   22ef8:	0005883a 	mov	r2,zero
   22efc:	dfc00517 	ldw	ra,20(sp)
   22f00:	dc400417 	ldw	r17,16(sp)
   22f04:	dc000317 	ldw	r16,12(sp)
   22f08:	dec00604 	addi	sp,sp,24
   22f0c:	f800283a 	ret
   22f10:	00800034 	movhi	r2,0
   22f14:	10800004 	addi	r2,r2,0
   22f18:	10002626 	beq	r2,zero,22fb4 <__register_exitproc+0x110>
   22f1c:	01006404 	movi	r4,400
   22f20:	d9400015 	stw	r5,0(sp)
   22f24:	d9800115 	stw	r6,4(sp)
   22f28:	d9c00215 	stw	r7,8(sp)
   22f2c:	00000000 	call	0 <__alt_mem_prog_mem-0x20000>
   22f30:	d9400017 	ldw	r5,0(sp)
   22f34:	d9800117 	ldw	r6,4(sp)
   22f38:	d9c00217 	ldw	r7,8(sp)
   22f3c:	10001d26 	beq	r2,zero,22fb4 <__register_exitproc+0x110>
   22f40:	81000017 	ldw	r4,0(r16)
   22f44:	10000115 	stw	zero,4(r2)
   22f48:	02000044 	movi	r8,1
   22f4c:	22405217 	ldw	r9,328(r4)
   22f50:	0007883a 	mov	r3,zero
   22f54:	12400015 	stw	r9,0(r2)
   22f58:	20805215 	stw	r2,328(r4)
   22f5c:	10006215 	stw	zero,392(r2)
   22f60:	10006315 	stw	zero,396(r2)
   22f64:	883fde26 	beq	r17,zero,22ee0 <__alt_data_end+0xfffef660>
   22f68:	18c9883a 	add	r4,r3,r3
   22f6c:	2109883a 	add	r4,r4,r4
   22f70:	1109883a 	add	r4,r2,r4
   22f74:	21802215 	stw	r6,136(r4)
   22f78:	01800044 	movi	r6,1
   22f7c:	12406217 	ldw	r9,392(r2)
   22f80:	30cc983a 	sll	r6,r6,r3
   22f84:	4992b03a 	or	r9,r9,r6
   22f88:	12406215 	stw	r9,392(r2)
   22f8c:	21c04215 	stw	r7,264(r4)
   22f90:	01000084 	movi	r4,2
   22f94:	893fd21e 	bne	r17,r4,22ee0 <__alt_data_end+0xfffef660>
   22f98:	11006317 	ldw	r4,396(r2)
   22f9c:	218cb03a 	or	r6,r4,r6
   22fa0:	11806315 	stw	r6,396(r2)
   22fa4:	003fce06 	br	22ee0 <__alt_data_end+0xfffef660>
   22fa8:	18805304 	addi	r2,r3,332
   22fac:	18805215 	stw	r2,328(r3)
   22fb0:	003fc606 	br	22ecc <__alt_data_end+0xfffef64c>
   22fb4:	00bfffc4 	movi	r2,-1
   22fb8:	003fd006 	br	22efc <__alt_data_end+0xfffef67c>

00022fbc <__call_exitprocs>:
   22fbc:	defff504 	addi	sp,sp,-44
   22fc0:	df000915 	stw	fp,36(sp)
   22fc4:	dd400615 	stw	r21,24(sp)
   22fc8:	dc800315 	stw	r18,12(sp)
   22fcc:	dfc00a15 	stw	ra,40(sp)
   22fd0:	ddc00815 	stw	r23,32(sp)
   22fd4:	dd800715 	stw	r22,28(sp)
   22fd8:	dd000515 	stw	r20,20(sp)
   22fdc:	dcc00415 	stw	r19,16(sp)
   22fe0:	dc400215 	stw	r17,8(sp)
   22fe4:	dc000115 	stw	r16,4(sp)
   22fe8:	d9000015 	stw	r4,0(sp)
   22fec:	2839883a 	mov	fp,r5
   22ff0:	04800044 	movi	r18,1
   22ff4:	057fffc4 	movi	r21,-1
   22ff8:	008000b4 	movhi	r2,2
   22ffc:	10926804 	addi	r2,r2,18848
   23000:	12000017 	ldw	r8,0(r2)
   23004:	45005217 	ldw	r20,328(r8)
   23008:	44c05204 	addi	r19,r8,328
   2300c:	a0001c26 	beq	r20,zero,23080 <__call_exitprocs+0xc4>
   23010:	a0800117 	ldw	r2,4(r20)
   23014:	15ffffc4 	addi	r23,r2,-1
   23018:	b8000d16 	blt	r23,zero,23050 <__call_exitprocs+0x94>
   2301c:	14000044 	addi	r16,r2,1
   23020:	8421883a 	add	r16,r16,r16
   23024:	8421883a 	add	r16,r16,r16
   23028:	84402004 	addi	r17,r16,128
   2302c:	a463883a 	add	r17,r20,r17
   23030:	a421883a 	add	r16,r20,r16
   23034:	e0001e26 	beq	fp,zero,230b0 <__call_exitprocs+0xf4>
   23038:	80804017 	ldw	r2,256(r16)
   2303c:	e0801c26 	beq	fp,r2,230b0 <__call_exitprocs+0xf4>
   23040:	bdffffc4 	addi	r23,r23,-1
   23044:	843fff04 	addi	r16,r16,-4
   23048:	8c7fff04 	addi	r17,r17,-4
   2304c:	bd7ff91e 	bne	r23,r21,23034 <__alt_data_end+0xfffef7b4>
   23050:	00800034 	movhi	r2,0
   23054:	10800004 	addi	r2,r2,0
   23058:	10000926 	beq	r2,zero,23080 <__call_exitprocs+0xc4>
   2305c:	a0800117 	ldw	r2,4(r20)
   23060:	1000301e 	bne	r2,zero,23124 <__call_exitprocs+0x168>
   23064:	a0800017 	ldw	r2,0(r20)
   23068:	10003226 	beq	r2,zero,23134 <__call_exitprocs+0x178>
   2306c:	a009883a 	mov	r4,r20
   23070:	98800015 	stw	r2,0(r19)
   23074:	00000000 	call	0 <__alt_mem_prog_mem-0x20000>
   23078:	9d000017 	ldw	r20,0(r19)
   2307c:	a03fe41e 	bne	r20,zero,23010 <__alt_data_end+0xfffef790>
   23080:	dfc00a17 	ldw	ra,40(sp)
   23084:	df000917 	ldw	fp,36(sp)
   23088:	ddc00817 	ldw	r23,32(sp)
   2308c:	dd800717 	ldw	r22,28(sp)
   23090:	dd400617 	ldw	r21,24(sp)
   23094:	dd000517 	ldw	r20,20(sp)
   23098:	dcc00417 	ldw	r19,16(sp)
   2309c:	dc800317 	ldw	r18,12(sp)
   230a0:	dc400217 	ldw	r17,8(sp)
   230a4:	dc000117 	ldw	r16,4(sp)
   230a8:	dec00b04 	addi	sp,sp,44
   230ac:	f800283a 	ret
   230b0:	a0800117 	ldw	r2,4(r20)
   230b4:	80c00017 	ldw	r3,0(r16)
   230b8:	10bfffc4 	addi	r2,r2,-1
   230bc:	15c01426 	beq	r2,r23,23110 <__call_exitprocs+0x154>
   230c0:	80000015 	stw	zero,0(r16)
   230c4:	183fde26 	beq	r3,zero,23040 <__alt_data_end+0xfffef7c0>
   230c8:	95c8983a 	sll	r4,r18,r23
   230cc:	a0806217 	ldw	r2,392(r20)
   230d0:	a5800117 	ldw	r22,4(r20)
   230d4:	2084703a 	and	r2,r4,r2
   230d8:	10000b26 	beq	r2,zero,23108 <__call_exitprocs+0x14c>
   230dc:	a0806317 	ldw	r2,396(r20)
   230e0:	2088703a 	and	r4,r4,r2
   230e4:	20000c1e 	bne	r4,zero,23118 <__call_exitprocs+0x15c>
   230e8:	89400017 	ldw	r5,0(r17)
   230ec:	d9000017 	ldw	r4,0(sp)
   230f0:	183ee83a 	callr	r3
   230f4:	a0800117 	ldw	r2,4(r20)
   230f8:	15bfbf1e 	bne	r2,r22,22ff8 <__alt_data_end+0xfffef778>
   230fc:	98800017 	ldw	r2,0(r19)
   23100:	153fcf26 	beq	r2,r20,23040 <__alt_data_end+0xfffef7c0>
   23104:	003fbc06 	br	22ff8 <__alt_data_end+0xfffef778>
   23108:	183ee83a 	callr	r3
   2310c:	003ff906 	br	230f4 <__alt_data_end+0xfffef874>
   23110:	a5c00115 	stw	r23,4(r20)
   23114:	003feb06 	br	230c4 <__alt_data_end+0xfffef844>
   23118:	89000017 	ldw	r4,0(r17)
   2311c:	183ee83a 	callr	r3
   23120:	003ff406 	br	230f4 <__alt_data_end+0xfffef874>
   23124:	a0800017 	ldw	r2,0(r20)
   23128:	a027883a 	mov	r19,r20
   2312c:	1029883a 	mov	r20,r2
   23130:	003fb606 	br	2300c <__alt_data_end+0xfffef78c>
   23134:	0005883a 	mov	r2,zero
   23138:	003ffb06 	br	23128 <__alt_data_end+0xfffef8a8>

0002313c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2313c:	defffd04 	addi	sp,sp,-12
   23140:	df000215 	stw	fp,8(sp)
   23144:	df000204 	addi	fp,sp,8
   23148:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2314c:	0001883a 	nop
   23150:	e0bfff17 	ldw	r2,-4(fp)
   23154:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   23158:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2315c:	10000226 	beq	r2,zero,23168 <_exit+0x2c>
    ALT_SIM_FAIL();
   23160:	002af070 	cmpltui	zero,zero,43969
   23164:	00000106 	br	2316c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   23168:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2316c:	003fff06 	br	2316c <__alt_data_end+0xfffef8ec>
